[{"__type__":"cc.Texture2D","content":"0,9729,9729,33071,33071,0,0,1"},{"__type__":"cc.EffectAsset","_name":"FlashLight","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"lightColor":{"value":[1,1,0,1],"editor":{"type":"color","tooltip":"光束颜色"},"type":16},"lightCenterPoint":{"value":[0.2,0.2],"editor":{"tooltip":"光束中心点坐标"},"type":14},"lightAngle":{"value":[45],"editor":{"tooltip":"光束倾斜角度","range":[0,180]},"type":13},"lightWidth":{"value":[0.2],"editor":{"tooltip":"光束宽度"},"type":13},"enableFog":{"value":[0],"editor":{"tooltip":"是否启用迷雾效果。0：不启用，非0：启用"},"type":13}},"program":"FlashLight|vs|fs"}]}],"shaders":[{"hash":3263911818,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_LIGHT\nuniform Light {\n  vec4 lightColor;\n  vec2 lightCenterPoint;\n  float lightAngle;\n  float lightWidth;\n  float enableFog;\n};\nvec4 addLightColor(vec4 textureColor, vec4 lightColor, vec2 lightCenterPoint, float lightAngle, float lightWidth) {\n  if (lightWidth <= 0.0) {\n    return textureColor;\n  }\n  float angleInRadians = radians(lightAngle);\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n    float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians));\n    float dx = lightOffsetX + (1.0 - v_uv0.y) / tan(angleInRadians);\n    float offsetDis = abs(v_uv0.x - dx);\n    dis = sin(angleInRadians) * offsetDis;\n  } else {\n    dis = abs(v_uv0.y - lightCenterPoint.y);\n  }\n  float a = 1.0 ;\n  if (bool(1.0)) {\n    a *= step(0.01, textureColor.a);\n  }\n  if (!bool(enableFog)) {\n    a *= step(dis, lightWidth * 0.5);\n  }\n  if (bool(1.0)) {\n    a *= 1.0 - dis / (lightWidth * 0.5);\n  }\n  vec4 finalLightColor = lightColor * a;\n  return textureColor * textureColor.a + finalLightColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_LIGHT\n  gl_FragColor = addLightColor(gl_FragColor, lightColor, lightCenterPoint, lightAngle, lightWidth);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_LIGHT\nuniform vec4 lightColor;\nuniform vec2 lightCenterPoint;\nuniform float lightAngle;\nuniform float lightWidth;\nuniform float enableFog;\nvec4 addLightColor(vec4 textureColor, vec4 lightColor, vec2 lightCenterPoint, float lightAngle, float lightWidth) {\n  if (lightWidth <= 0.0) {\n    return textureColor;\n  }\n  float angleInRadians = radians(lightAngle);\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n    float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians));\n    float dx = lightOffsetX + (1.0 - v_uv0.y) / tan(angleInRadians);\n    float offsetDis = abs(v_uv0.x - dx);\n    dis = sin(angleInRadians) * offsetDis;\n  } else {\n    dis = abs(v_uv0.y - lightCenterPoint.y);\n  }\n  float a = 1.0 ;\n  if (bool(1.0)) {\n    a *= step(0.01, textureColor.a);\n  }\n  if (!bool(enableFog)) {\n    a *= step(dis, lightWidth * 0.5);\n  }\n  if (bool(1.0)) {\n    a *= 1.0 - dis / (lightWidth * 0.5);\n  }\n  vec4 finalLightColor = lightColor * a;\n  return textureColor * textureColor.a + finalLightColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_LIGHT\n  gl_FragColor = addLightColor(gl_FragColor, lightColor, lightCenterPoint, lightAngle, lightWidth);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_LIGHT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"Light","members":[{"name":"lightColor","type":16,"count":1},{"name":"lightCenterPoint","type":14,"count":1},{"name":"lightAngle","type":13,"count":1},{"name":"lightWidth","type":13,"count":1},{"name":"enableFog","type":13,"count":1}],"defines":["ENABLE_LIGHT"],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"FlashLight|vs|fs"}]},{"__type__":"cc.Material","_name":"RollBg","_effectAsset":{"__uuid__":"d1zUbfa0ZFzY7yxuZ4G+me"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true},"props":{"timer":0}}}},{"__type__":"cc.Material","_name":"FlashLight","_effectAsset":{"__uuid__":"15Brc2c6pOw5k+4rnyIWlF"},"_techniqueData":{"0":{"props":{"lightColor":{"__type__":"cc.Color","r":220,"g":220,"b":71},"lightWidth":0.5,"enableFog":0,"lightCenterPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5},"lightAngle":60},"defines":{"USE_TEXTURE":true,"ENABLE_LIGHT":true}}}},{"__type__":"cc.AnimationClip","_name":"anim1","_duration":1,"wrapMode":2,"curveData":{"props":{"eulerAngles":[{"frame":0,"value":{"__type__":"cc.Vec3"}},{"frame":1,"value":{"__type__":"cc.Vec3","y":360}}]}}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_disabled","texture":"71VhFCTINJM6/Ky3oX9nBT","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.EffectAsset","_name":"WaveLight","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"lightColor":{"value":[1,1,1,1],"editor":{"type":"color","tooltip":"波光颜色"},"type":16},"timer":{"value":[0],"editor":{"tooltip":"波光位置"},"type":13}},"program":"WaveLight|vs|fs"}]}],"shaders":[{"hash":2628145449,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVE\nuniform Wave {\n  vec4 lightColor;\n  float timer;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVE\n    float timers = timer * .5 + 5.;\n    vec2 uv = v_uv0.xy;\n    vec2 p = mod(uv * 6.12, 6.12) - 250.0;\n    vec2 i = vec2(p);\n    float c = 1.0;\n    float inten = .0045;\n    for (int n = 0; n < 5; n++)\n    {\n        float t =  timers * (1.0 - (3.5 / float(n + 1)));\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));\n        c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n    }\n    c /= float(5);\n    c = 1.17 - pow(c, 1.4);\n    vec4 tex = texture2D(texture, uv);\n    vec3 colour = vec3(pow(abs(c), 20.0));\n    colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n    float alpha = c * tex[3];\n    tex[0] = tex[0] + colour[0] * alpha;\n    tex[1] = tex[1] + colour[1] * alpha;\n    tex[2] = tex[2] + colour[2] * alpha;\n    gl_FragColor = lightColor * tex;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVE\nuniform vec4 lightColor;\nuniform float timer;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVE\n    float timers = timer * .5 + 5.;\n    vec2 uv = v_uv0.xy;\n    vec2 p = mod(uv * 6.12, 6.12) - 250.0;\n    vec2 i = vec2(p);\n    float c = 1.0;\n    float inten = .0045;\n    for (int n = 0; n < 5; n++)\n    {\n        float t =  timers * (1.0 - (3.5 / float(n + 1)));\n        i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));\n        c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n    }\n    c /= float(5);\n    c = 1.17 - pow(c, 1.4);\n    vec4 tex = texture2D(texture, uv);\n    vec3 colour = vec3(pow(abs(c), 20.0));\n    colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n    float alpha = c * tex[3];\n    tex[0] = tex[0] + colour[0] * alpha;\n    tex[1] = tex[1] + colour[1] * alpha;\n    tex[2] = tex[2] + colour[2] * alpha;\n    gl_FragColor = lightColor * tex;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_WAVE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"Wave","members":[{"name":"lightColor","type":16,"count":1},{"name":"timer","type":13,"count":1}],"defines":["ENABLE_WAVE"],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"WaveLight|vs|fs"}]},[{"__type__":"cc.SceneAsset","_name":"helloworld","scene":{"__id__":1},"asyncLoadAssets":null},{"__type__":"cc.Scene","_name":"New Node","_children":[{"__id__":2},{"__id__":35}],"_anchorPoint":{"__type__":"cc.Vec2"},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"autoReleaseAssets":false},{"__type__":"cc.Node","_name":"Canvas","_parent":{"__id__":1},"_children":[{"__id__":3},{"__id__":4},{"__id__":5},{"__id__":28},{"__id__":29},{"__id__":30}],"_components":[{"__type__":"cc.Canvas","node":{"__id__":2},"_designResolution":{"__type__":"cc.Size","width":1280,"height":720}},{"__type__":"cc.Widget","node":{"__id__":2},"_alignFlags":45},{"__type__":"67d06dVnktC3auGCcb5cnks","node":{"__id__":2},"content":{"__id__":19},"bgNode":{"__id__":4},"uiNode":{"__id__":5},"slider":{"__id__":10},"waveNode":{"__id__":28},"waterNode":{"__id__":29}}],"_color":{"__type__":"cc.Color","r":252,"g":252,"b":252},"_contentSize":{"__type__":"cc.Size","width":1280,"height":720},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[640,360,0,0,0,0,1,1,1,1]},"_id":"a286bbGknJLZpRpxROV6M94"},{"__type__":"cc.Node","_name":"Main Camera","_parent":{"__id__":2},"_components":[{"__type__":"cc.Camera","node":{"__id__":3},"_cullingMask":-3,"_clearFlags":7,"_depth":-1,"_ortho":false,"_alignWithScreen":false}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,623.5382907247958,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"background","_parent":{"__id__":2},"_components":[{"__type__":"cc.Widget","node":{"__id__":4},"_alignFlags":45,"_originalWidth":200,"_originalHeight":150},{"__type__":"cc.Sprite","node":{"__id__":4},"_materials":[{"__uuid__":"a8cQQw4RhKk7JABA8nSgZU"}],"_spriteFrame":{"__uuid__":"32BDteSIhMHr0bnqNpvZbb"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":1280,"height":720},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"ui","_parent":{"__id__":2},"_children":[{"__id__":6},{"__id__":11},{"__id__":19}],"_components":[{"__type__":"cc.Widget","node":{"__id__":5},"_alignFlags":45}],"_contentSize":{"__type__":"cc.Size","width":1280,"height":720},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"New Slider","_parent":{"__id__":5},"_children":[{"__id__":7},{"__id__":8}],"_components":[{"__id__":10},{"__type__":"cc.Widget","node":{"__id__":6},"_alignFlags":20,"_left":328.711,"_bottom":235,"_verticalCenter":-75.497}],"_contentSize":{"__type__":"cc.Size","width":300,"height":20},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,-115,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Background","_objFlags":512,"_parent":{"__id__":6},"_components":[{"__type__":"cc.Sprite","node":{"__id__":7},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"312JYturtOx74Zjp9UpOqZ"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":300,"height":20},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Handle","_objFlags":512,"_parent":{"__id__":6},"_components":[{"__type__":"cc.Sprite","node":{"__id__":8},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"e7q6FL+VZEgLJUjVeDLic/"},"_type":1,"_sizeMode":2},{"__id__":9}],"_contentSize":{"__type__":"cc.Size","width":32,"height":32},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,0]}},{"__type__":"cc.Button","node":{"__id__":8},"_normalMaterial":{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"},"zoomScale":1.1,"_N$enableAutoGrayEffect":true,"_N$transition":3,"transition":3,"_N$pressedColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"pressedColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"_N$disabledColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"_N$normalSprite":{"__uuid__":"e7q6FL+VZEgLJUjVeDLic/"},"_N$pressedSprite":{"__uuid__":"e7q6FL+VZEgLJUjVeDLic/"},"pressedSprite":{"__uuid__":"e7q6FL+VZEgLJUjVeDLic/"},"_N$hoverSprite":{"__uuid__":"e7q6FL+VZEgLJUjVeDLic/"},"hoverSprite":{"__uuid__":"e7q6FL+VZEgLJUjVeDLic/"},"_N$disabledSprite":{"__uuid__":"29FYIk+N1GYaeWH/q1NxQO"},"_N$target":{"__id__":8}},{"__type__":"cc.Slider","node":{"__id__":6},"slideEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":2},"_componentId":"67d06dVnktC3auGCcb5cnks","handler":"onSlider"}],"_N$handle":{"__id__":9}},{"__type__":"cc.Node","_name":"content","_parent":{"__id__":5},"_children":[{"__id__":12},{"__id__":15},{"__id__":16}],"_components":[{"__type__":"cc.Layout","node":{"__id__":11},"_layoutSize":{"__type__":"cc.Size","width":400,"height":200},"_resize":1,"_N$layoutType":1},{"__type__":"cc.Widget","node":{"__id__":11},"_alignFlags":17,"_left":20,"_right":456.355,"_top":20,"_verticalCenter":169.388}],"_contentSize":{"__type__":"cc.Size","width":400,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,240,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"New Button","_parent":{"__id__":11},"_children":[{"__id__":13}],"_components":[{"__type__":"cc.Button","node":{"__id__":12},"zoomScale":0.9,"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":2},"_componentId":"67d06dVnktC3auGCcb5cnks","handler":"onWaveClick"}],"_N$transition":3,"transition":3,"_N$normalColor":{"__type__":"cc.Color","r":230,"g":230,"b":230},"_N$pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"_N$disabledColor":{"__type__":"cc.Color","r":120,"g":120,"b":120,"a":200},"_N$normalSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"_N$hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$disabledSprite":{"__uuid__":"29FYIk+N1GYaeWH/q1NxQO"},"_N$target":{"__id__":13}}],"_contentSize":{"__type__":"cc.Size","width":100,"height":40},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-150,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Background","_parent":{"__id__":12},"_children":[{"__id__":14}],"_components":[{"__type__":"cc.Sprite","node":{"__id__":13},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_type":1,"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":13},"alignMode":0,"_alignFlags":45,"_originalWidth":100,"_originalHeight":40}],"_contentSize":{"__type__":"cc.Size","width":100,"height":40},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,0]}},{"__type__":"cc.Node","_name":"Label","_parent":{"__id__":13},"_components":[{"__type__":"cc.Label","node":{"__id__":14},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_useOriginalSize":false,"_string":"波光","_N$string":"波光","_fontSize":20,"_enableWrapText":false,"_N$horizontalAlign":1,"_N$verticalAlign":1,"_N$overflow":1,"_N$cacheMode":1}],"_color":{"__type__":"cc.Color"},"_contentSize":{"__type__":"cc.Size","width":100,"height":40},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos","_parent":{"__id__":11},"_components":[{"__type__":"cc.Sprite","node":{"__id__":15},"_materials":[{"__uuid__":"6a6CwCRoVObrHs9hGmBUKj"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_type":1,"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":15},"_alignFlags":9,"_left":100}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"New Button","_parent":{"__id__":11},"_children":[{"__id__":17}],"_components":[{"__type__":"cc.Button","node":{"__id__":16},"zoomScale":0.9,"clickEvents":[{"__type__":"cc.ClickEvent","target":{"__id__":2},"_componentId":"67d06dVnktC3auGCcb5cnks","handler":"onWaterClick"}],"_N$transition":3,"transition":3,"_N$normalColor":{"__type__":"cc.Color","r":230,"g":230,"b":230},"_N$pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"pressedColor":{"__type__":"cc.Color","r":200,"g":200,"b":200},"_N$disabledColor":{"__type__":"cc.Color","r":120,"g":120,"b":120,"a":200},"_N$normalSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"pressedSprite":{"__uuid__":"e97GVMl6JHh5Ml5qEDdSGa"},"_N$hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"hoverSprite":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_N$disabledSprite":{"__uuid__":"29FYIk+N1GYaeWH/q1NxQO"},"_N$target":{"__id__":17}}],"_contentSize":{"__type__":"cc.Size","width":100,"height":40},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[150,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"Background","_parent":{"__id__":16},"_children":[{"__id__":18}],"_components":[{"__type__":"cc.Sprite","node":{"__id__":17},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_spriteFrame":{"__uuid__":"f0BIwQ8D5Ml7nTNQbh1YlS"},"_type":1,"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":17},"alignMode":0,"_alignFlags":45,"_originalWidth":100,"_originalHeight":40}],"_contentSize":{"__type__":"cc.Size","width":100,"height":40},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,0]}},{"__type__":"cc.Node","_name":"Label","_parent":{"__id__":17},"_components":[{"__type__":"cc.Label","node":{"__id__":18},"_materials":[{"__uuid__":"ecpdLyjvZBwrvm+cedCcQy"}],"_useOriginalSize":false,"_string":"水波纹","_N$string":"水波纹","_fontSize":20,"_enableWrapText":false,"_N$horizontalAlign":1,"_N$verticalAlign":1,"_N$overflow":1,"_N$cacheMode":1}],"_color":{"__type__":"cc.Color"},"_contentSize":{"__type__":"cc.Size","width":100,"height":40},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"content","_parent":{"__id__":5},"_children":[{"__id__":20},{"__id__":21},{"__id__":22},{"__id__":23},{"__id__":24},{"__id__":25},{"__id__":26},{"__id__":27}],"_components":[{"__type__":"cc.Layout","node":{"__id__":19},"_layoutSize":{"__type__":"cc.Size","width":1000,"height":470},"_resize":1,"_N$layoutType":3,"_N$spacingY":70},{"__type__":"cc.Widget","node":{"__id__":19},"_alignFlags":20,"_right":224.269,"_bottom":12,"_verticalCenter":-215.387}],"_contentSize":{"__type__":"cc.Size","width":1000,"height":470},"_anchorPoint":{"__type__":"cc.Vec2","x":0.5,"y":1},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,122,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos","_parent":{"__id__":19},"_components":[{"__type__":"cc.Sprite","node":{"__id__":20},"_materials":[{"__uuid__":"abMqjLgjBPh7JpqF/AtzKY"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-400,-100,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos copy","_parent":{"__id__":19},"_components":[{"__type__":"cc.Sprite","node":{"__id__":21},"_materials":[{"__uuid__":"cewDngENdPeLzZ9f/O/9Xh"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-200,-100,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos copy","_parent":{"__id__":19},"_components":[{"__type__":"cc.Sprite","node":{"__id__":22},"_materials":[{"__uuid__":"7dl646J1ZONqlPN17Hbxw0"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,-100,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos copy","_parent":{"__id__":19},"_components":[{"__type__":"cc.Sprite","node":{"__id__":23},"_materials":[{"__uuid__":"3dHN3m4xhNdYkqiKaVzSUD"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[200,-100,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos copy","_parent":{"__id__":19},"_components":[{"__type__":"cc.Sprite","node":{"__id__":24},"_materials":[{"__uuid__":"3dHN3m4xhNdYkqiKaVzSUD"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[400,-100,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos copy","_parent":{"__id__":19},"_components":[{"__type__":"cc.Sprite","node":{"__id__":25},"_materials":[{"__uuid__":"1cIcudy0REzr7dxm5osXil"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-400,-370,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos copy","_parent":{"__id__":19},"_components":[{"__type__":"cc.Sprite","node":{"__id__":26},"_materials":[{"__uuid__":"1cIcudy0REzr7dxm5osXil"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_type":1,"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[-200,-370,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"cocos copy","_parent":{"__id__":19},"_components":[{"__type__":"cc.Sprite","node":{"__id__":27},"_materials":[{"__uuid__":"1bZ76y+dhKF7E4lo6DxhDl"}],"_spriteFrame":{"__uuid__":"49zgyyIwtMlrdUcW9LT7gZ"},"_sizeMode":0}],"_contentSize":{"__type__":"cc.Size","width":200,"height":200},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,-370,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"background","_parent":{"__id__":2},"_active":false,"_components":[{"__type__":"cc.Sprite","node":{"__id__":28},"_materials":[{"__uuid__":"f6+9yqF2ZKTbdtRcWS8bty"}],"_spriteFrame":{"__uuid__":"32BDteSIhMHr0bnqNpvZbb"},"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":28},"_alignFlags":45,"_originalWidth":200,"_originalHeight":200},{"__type__":"0a07e2VxfFDKYGlQJd8wQLN","node":{"__id__":28}},{"__type__":"cc.BlockInputEvents","node":{"__id__":28}}],"_contentSize":{"__type__":"cc.Size","width":1280,"height":720},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"background","_parent":{"__id__":2},"_active":false,"_components":[{"__type__":"cc.Sprite","node":{"__id__":29},"_materials":[{"__uuid__":"c94qAUdLZL86mFFn2gbijS"}],"_spriteFrame":{"__uuid__":"32BDteSIhMHr0bnqNpvZbb"},"_sizeMode":0},{"__type__":"cc.Widget","node":{"__id__":29},"_alignFlags":45,"_originalWidth":200,"_originalHeight":200},{"__type__":"0a07e2VxfFDKYGlQJd8wQLN","node":{"__id__":29}},{"__type__":"cc.BlockInputEvents","node":{"__id__":29}}],"_contentSize":{"__type__":"cc.Size","width":1280,"height":720},"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]}},{"__type__":"cc.Node","_name":"3DStage","_parent":{"__id__":2},"_children":[{"__id__":31},{"__id__":32},{"__id__":33}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"New Directional Light","_parent":{"__id__":30},"_components":[{"__type__":"cc.Light","node":{"__id__":31},"_shadowMaxDepth":1000,"_shadowFrustumSize":50}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"New Ambient Light","_parent":{"__id__":30},"_components":[{"__type__":"cc.Light","node":{"__id__":32},"_type":3,"_range":1,"_shadowMaxDepth":1000,"_shadowFrustumSize":50}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"New Node","_parent":{"__id__":30},"_children":[{"__id__":34}],"_components":[{"__type__":"cc.Animation","node":{"__id__":33},"_defaultClip":{"__uuid__":"246xR6KFVBt5RWOLRNyews"},"_clips":[{"__uuid__":"246xR6KFVBt5RWOLRNyews"}],"playOnLoad":true}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[0,0,0,0,0,0,1,1,1,1]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"New 3D Particle","_parent":{"__id__":33},"_components":[{"__type__":"cc.ParticleSystem3D","node":{"__id__":34},"_materials":[{"__uuid__":"43L6CczwNM/6GGmCYEQIoH"},{"__uuid__":"dbVIdmGwBNkqjw8svlWO1g"}],"duration":1,"startDelay":{"__type__":"cc.CurveRange"},"startLifetime":{"__type__":"cc.CurveRange","constant":1},"startColor":{"__type__":"cc.GradientRange"},"startSize":{"__type__":"cc.CurveRange","constant":1},"startSpeed":{"__type__":"cc.CurveRange"},"startRotation":{"__type__":"cc.CurveRange"},"gravityModifier":{"__type__":"cc.CurveRange"},"rateOverTime":{"__type__":"cc.CurveRange"},"rateOverDistance":{"__type__":"cc.CurveRange"},"bursts":[{"__type__":"cc.Burst","minCount":1,"maxCount":1,"count":{"__type__":"cc.CurveRange","constant":1}}],"_trailModule":{"__type__":"cc.TrailModule","_enable":true,"lifeTime":{"__type__":"cc.CurveRange","constant":1},"_minParticleDistance":0.12,"existWithParticles":false,"widthRatio":{"__type__":"cc.CurveRange","constant":10},"colorOverTrail":{"__type__":"cc.GradientRange"},"colorOvertime":{"__type__":"cc.GradientRange"}}}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[100,0,0,0,0,0,1,100,100,100]},"_is3DNode":true,"_groupIndex":1,"groupIndex":1},{"__type__":"cc.Node","_name":"3DCamera","_parent":{"__id__":1},"_components":[{"__type__":"cc.Camera","node":{"__id__":35},"_cullingMask":2,"_farClip":1024,"_ortho":false,"_alignWithScreen":false}],"_trs":{"__type__":"TypedArray","ctor":"Float64Array","array":[650,550,500,-0.17364817766693033,0,0,0.984807753012208,1,1,1]},"_eulerAngles":{"__type__":"cc.Vec3","x":-20},"_is3DNode":true,"_id":"9fJWrhEAtIZowFM2EPW9gA"}],{"__type__":"cc.SpriteFrame","content":{"name":"default_scrollbar","texture":"02kcE0s9pAmLe145ftvpR/","rect":[0,0,30,15],"offset":[0,0],"originalSize":[30,15],"capInsets":[10,4,10,4]}},{"__type__":"cc.SpriteFrame","content":{"name":"bg","texture":"f2uVibFb5IXr7YP9OFV54/","rect":[0,0,1920,1080],"offset":[0,0],"originalSize":[1920,1080],"capInsets":[0,0,0,0]}},{"__type__":"cc.Texture2D","content":"0,9729,9729,33071,33071,0,0,1"},{"__type__":"cc.Material","_name":"Gray","_effectAsset":{"__uuid__":"95bLksmiFDUqMc8mBqu0SO"},"_techniqueData":{"0":{"props":{"grayLev":0,"oldLev":0},"defines":{"USE_TEXTURE":true,"ENABLE_OLD":true,"ENABLE_GRAY":true}}}},{"__type__":"cc.SpriteFrame","content":{"name":"freedom","texture":"6fyH0uPv5Aq7a2XpI5NF2g","rect":[0,0,755,755],"offset":[0,0],"originalSize":[755,755],"capInsets":[0,0,0,0]}},{"__type__":"cc.Texture2D","content":"0,9729,9729,33071,33071,0,0,1"},{"__type__":"cc.EffectAsset","_name":"CirclePortrait2","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13}},"program":"CirclePortrait2|vs|fs"}]}],"shaders":[{"hash":4066417885,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float len = length(vec2(abs(uv.x), abs(uv.y)));\n  if(len > 0.4) {\n    if(len < 0.5) {\n      o.a = 1.0 - smoothstep(0., 0.1, len - 0.4);\n    } else {\n      o.a = 0.;\n    }\n  }\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float len = length(vec2(abs(uv.x), abs(uv.y)));\n  if(len > 0.4) {\n    if(len < 0.5) {\n      o.a = 1.0 - smoothstep(0., 0.1, len - 0.4);\n    } else {\n      o.a = 0.;\n    }\n  }\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"CirclePortrait2|vs|fs"}]},{"__type__":"cc.Material","_name":"CirclePortrait2","_effectAsset":{"__uuid__":"625Jy/0zNJhqmphtWCXaek"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true}}}},{"__type__":"cc.Texture2D","content":"1,9729,9729,33071,33071,0,0,1"},{"__type__":"cc.Texture2D","content":"0,9729,9729,33071,33071,0,0,1"},{"__type__":"cc.Material","_name":"Mosaic","_effectAsset":{"__uuid__":"e1eGU+ZitDhLTHaBGh141Y"},"_techniqueData":{"0":{"props":{"xBlockCount":75,"yBlockCount":75},"defines":{"USE_TEXTURE":true,"USE_MOSAIC":true}}}},{"__type__":"cc.EffectAsset","_name":"Water","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"iResolution":{"value":[1280,720],"editor":{"tooltip":"图片分辨率"},"type":14},"timer":{"value":[0],"editor":{"tooltip":"水波位置"},"type":13}},"program":"Water|vs|fs"}]}],"shaders":[{"hash":4152563497,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WATER\nuniform Water {\n  vec2 iResolution;\n  float timer;\n};\nvec2 s(vec2 p)\n{\n    float d = timer * 0.2, x = 8. * (p.x + d), y = 8.*(p.y + d);\n    return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 rs = iResolution.xy;\n    vec2 uv = fragCoord;\n    vec2 q = uv + 2. / iResolution.x * (s(uv) - s(uv + rs));\n    fragColor = texture2D(texture, q);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WATER\n    mainImage(gl_FragColor, v_uv0.xy);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WATER\nuniform vec2 iResolution;\nuniform float timer;\nvec2 s(vec2 p)\n{\n    float d = timer * 0.2, x = 8. * (p.x + d), y = 8.*(p.y + d);\n    return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 rs = iResolution.xy;\n    vec2 uv = fragCoord;\n    vec2 q = uv + 2. / iResolution.x * (s(uv) - s(uv + rs));\n    fragColor = texture2D(texture, q);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WATER\n    mainImage(gl_FragColor, v_uv0.xy);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_WATER","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"Water","members":[{"name":"iResolution","type":14,"count":1},{"name":"timer","type":13,"count":1}],"defines":["ENABLE_WATER"],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"Water|vs|fs"}]},{"__type__":"cc.EffectAsset","_name":"Gray","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"oldLev":{"value":[1],"editor":{"tooltip":"老化程度","range":[-2,2]},"type":13},"grayLev":{"value":[1],"editor":{"tooltip":"灰化程度","range":[-5,5]},"type":13}},"program":"Gray|vs|fs"}]}],"shaders":[{"hash":956674703,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_OLD\nuniform OldLevel {\n  float oldLev;\n};\nvec4 getOldColor(vec4 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec4(r, g, b, color.a);\n}\n#endif\n#if ENABLE_GRAY\nuniform GrayLevel {\n  float grayLev;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_OLD\n    vec4 srcColor = o;\n    vec4 oldColor = getOldColor(srcColor);\n    o = mix(srcColor, oldColor, oldLev);\n  #endif\n  #if ENABLE_GRAY\n    vec4 srcColor2 = o;\n    float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n    vec4 grayColor = vec4(gray, gray, gray, o.a);\n    o = mix(srcColor2, grayColor, grayLev);\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_OLD\nuniform float oldLev;\nvec4 getOldColor(vec4 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec4(r, g, b, color.a);\n}\n#endif\n#if ENABLE_GRAY\nuniform float grayLev;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_OLD\n    vec4 srcColor = o;\n    vec4 oldColor = getOldColor(srcColor);\n    o = mix(srcColor, oldColor, oldLev);\n  #endif\n  #if ENABLE_GRAY\n    vec4 srcColor2 = o;\n    float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n    vec4 grayColor = vec4(gray, gray, gray, o.a);\n    o = mix(srcColor2, grayColor, grayLev);\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_OLD","type":"boolean","defines":[]},{"name":"ENABLE_GRAY","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"OldLevel","members":[{"name":"oldLev","type":13,"count":1}],"defines":["ENABLE_OLD"],"binding":1},{"name":"GrayLevel","members":[{"name":"grayLev","type":13,"count":1}],"defines":["ENABLE_GRAY"],"binding":2}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"Gray|vs|fs"}]},{"__type__":"cc.EffectAsset","_name":"PointLight","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"centerColor":{"value":[1,1,0,1],"editor":{"type":"color","tooltip":"发光颜色"},"type":16},"centerPoint":{"value":[0.2,0.2],"editor":{"tooltip":"扩散起点坐标"},"type":14},"radius":{"value":[0.4],"editor":{"tooltip":"扩散半径"},"type":13},"enableFog":{"value":[0],"editor":{"tooltip":"是否启用迷雾效果。0：不启用，非0：启用"},"type":13}},"program":"PointLight|vs|fs"}]}],"shaders":[{"hash":87302622,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_DIFFUSION\nuniform Diffusion {\n  vec4 centerColor;\n  vec2 centerPoint;\n  float radius;\n  float enableFog;\n};\nvec4 addLightColor(vec4 textureColor, vec2 centerPoint, float radius, vec4 centerColor) {\n  float dis = distance(v_uv0, centerPoint);\n  float a = 1.0 ;\n  if (bool(1.0)) {\n    a *= step(0.01, textureColor.a);\n  }\n  if (!bool(enableFog)) {\n    a *= step(dis, radius);\n  }\n  a *= 1.0 - (dis / radius);\n  vec4 lightColor = centerColor * a;\n  return textureColor * textureColor.a + lightColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_DIFFUSION\n  gl_FragColor = addLightColor(gl_FragColor, centerPoint, radius, centerColor);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_DIFFUSION\nuniform vec4 centerColor;\nuniform vec2 centerPoint;\nuniform float radius;\nuniform float enableFog;\nvec4 addLightColor(vec4 textureColor, vec2 centerPoint, float radius, vec4 centerColor) {\n  float dis = distance(v_uv0, centerPoint);\n  float a = 1.0 ;\n  if (bool(1.0)) {\n    a *= step(0.01, textureColor.a);\n  }\n  if (!bool(enableFog)) {\n    a *= step(dis, radius);\n  }\n  a *= 1.0 - (dis / radius);\n  vec4 lightColor = centerColor * a;\n  return textureColor * textureColor.a + lightColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_DIFFUSION\n  gl_FragColor = addLightColor(gl_FragColor, centerPoint, radius, centerColor);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_DIFFUSION","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"Diffusion","members":[{"name":"centerColor","type":16,"count":1},{"name":"centerPoint","type":14,"count":1},{"name":"radius","type":13,"count":1},{"name":"enableFog","type":13,"count":1}],"defines":["ENABLE_DIFFUSION"],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"PointLight|vs|fs"}]},{"__type__":"cc.Material","_name":"PointLight","_effectAsset":{"__uuid__":"97yzEyZeJJ3Z+6gdOaWJOc"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true,"ENABLE_DIFFUSION":true},"props":{"radius":0.2,"centerColor":{"__type__":"cc.Color","r":218,"g":50,"b":50},"enableFog":1,"centerPoint":{"__type__":"cc.Vec2","x":0.5,"y":0.5}}}}},{"__type__":"cc.Material","_name":"CirclePortrait","_effectAsset":{"__uuid__":"f8DlO7io1KNp/lDAWBEx6M"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true,"ENABLE_CIRCLEPORTRAIT":true,"INPUT_IS_GAMMA":false},"props":{"radius":0.25}}}},{"__type__":"cc.Texture2D","content":"0,9729,9729,33071,33071,0,0,1"},{"__type__":"cc.EffectAsset","_name":"GaussianBlur","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"blurDensity":{"value":[100,100],"editor":{"tooltip":"模糊精度，越小越模糊"},"type":14}},"program":"GaussianBlur|vs|fs"}]}],"shaders":[{"hash":3167973982,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_GAUSSIANBLUR\n        uniform GaussianBlur{\n    vec2 blurDensity;\n  };\n  float getWeight(float x, float y) {\n    return (1.0 / (2.0 * 3.141592653589793 * pow(1.5, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(1.5, 2.0)));\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_GAUSSIANBLUR\n    const float size = floor(1.5 * 6.0 + 1.0);\n    const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n        totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n        totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);\n    float onePxWidth = 1.0 / blurDensity.x;\n    float onePxHeight = 1.0 / blurDensity.y;\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        finalColor += texture(texture, v_uv0 + vec2(onePxWidth * x, onePxHeight * y)) * weight;\n      }\n    }\n    gl_FragColor = finalColor;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_GAUSSIANBLUR\n        uniform vec2 blurDensity;\n  float getWeight(float x, float y) {\n    return (1.0 / (2.0 * 3.141592653589793 * pow(1.5, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(1.5, 2.0)));\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_GAUSSIANBLUR\n    const float size = floor(1.5 * 6.0 + 1.0);\n    const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n        totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n        totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);\n    float onePxWidth = 1.0 / blurDensity.x;\n    float onePxHeight = 1.0 / blurDensity.y;\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        finalColor += texture2D(texture, v_uv0 + vec2(onePxWidth * x, onePxHeight * y)) * weight;\n      }\n    }\n    gl_FragColor = finalColor;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_GAUSSIANBLUR","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"GaussianBlur","members":[{"name":"blurDensity","type":14,"count":1}],"defines":["ENABLE_GAUSSIANBLUR"],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"GaussianBlur|vs|fs"}]},{"__type__":"cc.Material","_name":"Water","_effectAsset":{"__uuid__":"8dDmKanpZF7rwGFwz89vvD"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true,"ENABLE_WATER":true}}}},{"__type__":"cc.Material","_name":"GaussianBlur","_effectAsset":{"__uuid__":"b5VLI/D89M1asqlTCO5/iv"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true,"ENABLE_GAUSSIANBLUR":true},"props":{"blurDensity":{"__type__":"cc.Vec2","x":100,"y":100}}}}},{"__type__":"cc.EffectAsset","_name":"RollBg","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"timer":{"value":[0],"type":13}},"program":"RollBg|vs|fs"}]}],"shaders":[{"hash":2981254898,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  float timer;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float offset = fract(timer + v_uv0.y);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, vec2(v_uv0.x, offset));\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, vec2(v_uv0.x, offset) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float timer;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float offset = fract(timer + v_uv0.y);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, vec2(v_uv0.x, offset));\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, vec2(v_uv0.x, offset) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"Params","members":[{"name":"timer","type":13,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"RollBg|vs|fs"}]},{"__type__":"cc.Material","_name":"builtin-3d-trail","_effectAsset":{"__uuid__":"2afAA24LNP4YmYiaVLiivs"},"_techniqueData":{"0":{"props":{"mainTexture":{"__uuid__":"33PwZpxuxC0Jp9dcw4IkAv"}}}}},{"__type__":"cc.EffectAsset","_name":"Mosaic","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"xBlockCount":{"value":[30],"editor":{"tooltip":"X轴方向马赛克方块数量"},"type":13},"yBlockCount":{"value":[30],"editor":{"tooltip":"Y轴方向马赛克方块数量"},"type":13}},"program":"Mosaic|vs|fs"}]}],"shaders":[{"hash":1914500425,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MOSAIC\nuniform Mosaic {\n  float xBlockCount;\n  float yBlockCount;\n};\nvec2 getUvMapPos() {\n  float xCount;\n  if (xBlockCount <= 0.0) {\n    xCount = 1.0;\n  } else {\n    xCount = xBlockCount;\n  }\n  float blockWidth = 1.0 / xCount;\n  float blockXIndex = floor(v_uv0.x / blockWidth);\n  float yCount;\n  if (yBlockCount <= 0.0) {\n    yCount = 1.0;\n  } else {\n    yCount = yBlockCount;\n  }\n  float blockHeight = 1.0 / yCount;\n  float blockYIndex = floor(v_uv0.y / blockHeight);\n  return vec2(blockWidth * (blockXIndex + 0.5), blockHeight * (blockYIndex + 0.5));\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 mosPos = v_uv0;\n  #if USE_MOSAIC\n    mosPos = getUvMapPos();\n  #endif\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, mosPos);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, mosPos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MOSAIC\nuniform float xBlockCount;\nuniform float yBlockCount;\nvec2 getUvMapPos() {\n  float xCount;\n  if (xBlockCount <= 0.0) {\n    xCount = 1.0;\n  } else {\n    xCount = xBlockCount;\n  }\n  float blockWidth = 1.0 / xCount;\n  float blockXIndex = floor(v_uv0.x / blockWidth);\n  float yCount;\n  if (yBlockCount <= 0.0) {\n    yCount = 1.0;\n  } else {\n    yCount = yBlockCount;\n  }\n  float blockHeight = 1.0 / yCount;\n  float blockYIndex = floor(v_uv0.y / blockHeight);\n  return vec2(blockWidth * (blockXIndex + 0.5), blockHeight * (blockYIndex + 0.5));\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 mosPos = v_uv0;\n  #if USE_MOSAIC\n    mosPos = getUvMapPos();\n  #endif\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, mosPos);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, mosPos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_MOSAIC","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"Mosaic","members":[{"name":"xBlockCount","type":13,"count":1},{"name":"yBlockCount","type":13,"count":1}],"defines":["USE_MOSAIC"],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"Mosaic|vs|fs"}]},{"__type__":"cc.SpriteFrame","content":{"name":"default_radio_button_off","texture":"56fc2Ai/RFNYpaMT8crweK","rect":[3,3,26,26],"offset":[0,0],"originalSize":[32,32],"capInsets":[0,0,0,0]}},{"__type__":"cc.Texture2D","content":"0,9729,9729,33071,33071,0,0,1"},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_pressed","texture":"b4P/PCArtIdIH38t6mlw8Y","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.SpriteFrame","content":{"name":"default_btn_normal","texture":"e8Ueib+qJEhL6mXAHdnwbi","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}},{"__type__":"cc.Texture2D","content":"0,9729,9729,33071,33071,0,0,1"},{"__type__":"cc.Material","_name":"WaveLight","_effectAsset":{"__uuid__":"2ahVLjKsNO0Zv/QwwKuKLm"},"_techniqueData":{"0":{"props":{"lightColor":{"__type__":"cc.Color","r":255,"g":255,"b":255},"timer":0},"defines":{"USE_TEXTURE":true,"INPUT_IS_GAMMA":false,"ENABLE_WAVE":true}}}},{"__type__":"cc.EffectAsset","_name":"CirclePortrait","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"value":[0.5],"type":13},"radius":{"value":[1],"editor":{"tooltip":"圆角半径"},"type":13}},"program":"CirclePortrait|vs|fs"}]}],"shaders":[{"hash":216731814,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_CIRCLEPORTRAIT\nuniform RoundCorner {\n  float radius;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_CIRCLEPORTRAIT\n  float circleRadius = clamp(0.0, 0.5, radius);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float rx = abs(uv.x) - (0.5 - circleRadius);\n  float ry = abs(uv.y) - (0.5 - circleRadius);\n  float mx = step((0.5 - circleRadius), abs(uv.x));\n  float my = step((0.5 - circleRadius), abs(uv.y));\n  float len = length(vec2(abs(rx), abs(ry)));\n  float a = 1.0 - mx * my * step(circleRadius, len) * smoothstep(0., circleRadius * 0.01, len - circleRadius);\n  o = vec4(o.rgb, o.a * a);\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_CIRCLEPORTRAIT\nuniform float radius;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_CIRCLEPORTRAIT\n  float circleRadius = clamp(0.0, 0.5, radius);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float rx = abs(uv.x) - (0.5 - circleRadius);\n  float ry = abs(uv.y) - (0.5 - circleRadius);\n  float mx = step((0.5 - circleRadius), abs(uv.x));\n  float my = step((0.5 - circleRadius), abs(uv.y));\n  float len = length(vec2(abs(rx), abs(ry)));\n  float a = 1.0 - mx * my * step(circleRadius, len) * smoothstep(0., circleRadius * 0.01, len - circleRadius);\n  o = vec4(o.rgb, o.a * a);\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_CIRCLEPORTRAIT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"RoundCorner","members":[{"name":"radius","type":13,"count":1}],"defines":["ENABLE_CIRCLEPORTRAIT"],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"CirclePortrait|vs|fs"}]}]