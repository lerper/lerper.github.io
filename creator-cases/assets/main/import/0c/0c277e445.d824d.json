[1,["ecpdLyjvZBwrvm+cedCcQy","a2MjXRFdtLlYQ5ouAFv/+R","c5pm2ljHNKNJMPIWkBLKKm","3dHN3m4xhNdYkqiKaVzSUD","09PDEAShpAOZlLIB3lrimu","32BDteSIhMHr0bnqNpvZbb","a1zL0E6qtPV7RbdiEzgKHu","6fgBCSDDdPMInvyNlggls2","73gu8lX5VKIYNcVsCidYjk","9bvaMerUlDyary99mJa6xp","82migssElAGb04Ws6NimQX","246xR6KFVBt5RWOLRNyews","1cIcudy0REzr7dxm5osXil","7dl646J1ZONqlPN17Hbxw0","cewDngENdPeLzZ9f/O/9Xh","1bZ76y+dhKF7E4lo6DxhDl","6a6CwCRoVObrHs9hGmBUKj","abMqjLgjBPh7JpqF/AtzKY","b9a8Z4191EBJkOuO8gD3yz","037H1jujxEmo1RzmjfVCUt","edK+4MLkNOYZtVOdF4zzX6","d1zUbfa0ZFzY7yxuZ4G+me","15Brc2c6pOw5k+4rnyIWlF","600xt7sV1DuqY/W98s0cfg","0dvkK2fdNI5ZJP77PCFoMR","01SqhKgu5M/rvts7omDL6K","f2uVibFb5IXr7YP9OFV54/","95bLksmiFDUqMc8mBqu0SO","2ef7+vAZdGFYM89l52/4EH","d4QGv+71pB4YtYXpg7qWTy","7a/QZLET9IDreTiBfRn2PD","80FaTvvyRNBKjHAYREg9zZ","98TwJ7ZT1Co45ejNkarnic","e9SzF+1hhKQ6kSkx1NKqNp","adAqEZt9tBnoBYk57+1MvN","625Jy/0zNJhqmphtWCXaek","e1eGU+ZitDhLTHaBGh141Y","d3w7PzjWpPcr40wooh+CN0","f6+9yqF2ZKTbdtRcWS8bty","d8HsitJHxOYqo801xBk8ev","75JvdHr3dDJJcIGT733PQm","02delMVqdBD70a/HSD99FK","abvopSNn5GrbWf2e9Ota/4","c94qAUdLZL86mFFn2gbijS","97yzEyZeJJ3Z+6gdOaWJOc","43L6CczwNM/6GGmCYEQIoH","dbVIdmGwBNkqjw8svlWO1g","54odaK68hHjIRELRoc0FLQ","59S4JDtylD3rGsYw8ez4zb","f8DlO7io1KNp/lDAWBEx6M","96UsCPb/xMjqDKyNJaz3TI","e4852A/txAPqurTdkqQcAA","daopNGeZ9OibWO21NY2wAo","a8cQQw4RhKk7JABA8nSgZU","8dDmKanpZF7rwGFwz89vvD","b5VLI/D89M1asqlTCO5/iv","c4NkiuA/xOepF4JgHehgpb","e5J9ndiq5Gg6CeRsKWpsmE","33PwZpxuxC0Jp9dcw4IkAv","2afAA24LNP4YmYiaVLiivs","2ahVLjKsNO0Zv/QwwKuKLm","1aBGcsWJ5Je5XORdjUAhG/","2fqBKpW55AqqLxOlHQ0Lm2","d6YcUy6yBHT563f6A42yll"],["node","_spriteFrame","_parent","_effectAsset","scene","_textureSetter","connectedBody","fire","mainTexture","control","_N$content","textureRender","root","peekCard","back","card","touch","mainList","_N$skeletonData","_defaultClip","bg"],[["cc.Node",["_name","_groupIndex","_is3DNode","_id","_active","_opacity","_components","_parent","_contentSize","_trs","_children","_position","_scale","_anchorPoint","_eulerAngles","_prefab","_color"],-3,9,1,5,7,2,8,8,5,5,4,5],"cc.Texture2D","cc.SpriteFrame",["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","_top","_bottom","_right","_left","node"],-4,1],["cc.Node",["_name","_is3DNode","_groupIndex","_parent","_children","_components","_contentSize","_trs","_prefab","_position","_scale","_anchorPoint","_eulerAngles"],0,1,2,12,5,7,4,8,8,5,5],["cc.Camera",["_clearFlags","_depth","_cullingMask","_ortho","_alignWithScreen","_farClip","_nearClip","node","_backgroundColor"],-4,1,5],["cc.Sprite",["_sizeMode","_type","node","_materials","_spriteFrame"],1,1,3,6],["cc.Label",["_string","_N$horizontalAlign","_N$verticalAlign","_N$fontFamily","_lineHeight","_N$overflow","_N$cacheMode","_fontSize","_styleFlags","node","_materials"],-6,1,3],["cc.RigidBody",["_gravityScale","_type","enabledContactListener","node"],0,1],["cc.CurveRange",["constant","multiplier","mode","curve"],0,4],["cc.Scene",["_name","_active","_children","_anchorPoint","_trs","_scale"],1,2,5,7,8],["cc.Layout",["_resize","_N$layoutType","_N$paddingLeft","_N$paddingRight","_N$spacingX","node","_layoutSize"],-2,1,5],["cc.PhysicsBoxCollider",["_friction","_restitution","node","_size"],1,1,5],["cc.GradientRange",["_mode","color","gradient"],2,5,4],["cc.Node",["_name","_parent","_components","_children","_prefab","_contentSize","_position","_scale"],2,1,2,2,4,5,8,8],["cc.PrefabInfo",["fileId","root"],2,1],["cc.Mask",["_N$alphaThreshold","_type","node","_materials"],1,1,3],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.ScrollView",["brake","bounceDuration","_N$horizontalScrollBar","_N$verticalScrollBar","vertical","horizontal","node","_N$content"],-3,1,1],["cc.ParticleSystem3D",["duration","_renderMode","_velocityScale","node","_materials","startDelay","startLifetime","startColor","startSize","startSpeed","startRotation","gravityModifier","rateOverTime","rateOverDistance","bursts","_trailModule","_shapeModule","_colorOverLifetimeModule","_sizeOvertimeModule"],0,1,3,4,4,4,4,4,4,4,4,4,9,4,4,4,4],["cc.ShapeModule",["enable","radius","_shapeType","_arc","emitFrom","radiusThickness","_angle","length","arcSpeed"],-5,4],["cc.AlphaKey",["alpha","time"],1],["cc.Keyframe",["value","time","inTangent","outTangent"],-1],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.BlockInputEvents",["node"],3,1],["cc.Canvas",["node","_designResolution"],3,1,5],["2fec4uVwqZBpID/pEDrGtkh",["node","peekCard","back","card"],3,1,1,6,6],["f15c4Pk3g9JaK0IIsX+vhFW",["node"],3,1],["993cfvAUGJBI6z7BU/qIH73",["node","mask","cardBack","cardFace","shadowMask","shadow","finger1","finger2"],3,1,1,1,1,1,1,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1],["cc.Material",["_name","_techniqueData"],2,11],["9310b6zJ1dMWoUQWBQiFk3E",["node","fire"],3,1,1],["cc.AnimationClip",["_name","_duration","wrapMode","curveData"],0,11],["38e3cYHoCFNDKDVql/o5qOO",["node","control","textureRender"],3,1,1,6],["75d48lC5HlGLqTP86sGPtGS",["node","mainList","touch"],3,1,1,1],["f93e55TfQxLOoILMSqltWzD",["adaptiveSize","node"],2,1],["cc.Button",["zoomScale","_N$transition","node","clickEvents"],1,1,9],["4daeeS6TERKraSFhqrThdUB",["lackCenter","frameByFrameRenderNum","node","tmpNode","pageChangeEvent","renderEvent"],1,1,1,4,4],["cc.Graphics",["_lineWidth","node","_materials"],2,1,3],["sp.Skeleton",["defaultSkin","_preCacheMode","loop","premultipliedAlpha","_animationName","_N$enableBatch","node","_materials"],-3,1,3],["sp.SkeletonData",["_name","_atlasText","textureNames","_skeletonJson","textures"],-1,3],["b5d44r0XHxGHKlf8EVzhJYm",["node"],3,1],["cc.WeldJoint",["node","anchor","connectedAnchor","connectedBody"],3,1,5,5,1],["cc.WheelJoint",["_dampingRatio","node","anchor","connectedAnchor","connectedBody"],2,1,5,5,1],["cc.RevoluteJoint",["node","anchor","connectedAnchor","connectedBody"],3,1,5,5,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.ParticleSystem3D",["duration","_renderMode","node","_materials","startDelay","startLifetime","startColor","startSize","startSpeed","startRotation","gravityModifier","rateOverTime","rateOverDistance","bursts","_shapeModule","_rotationOvertimeModule"],1,1,12,4,4,4,4,4,4,4,4,4,9,4,4],["cc.Burst",["minCount","maxCount","count"],1,4],["cc.TrailModule",["_enable","_minParticleDistance","existWithParticles","lifeTime","widthRatio","colorOverTrail","colorOvertime"],0,4,4,4,4],["cc.RotationOvertimeModule",["enable","x","y","z"],2,4,4,4],["cc.ColorOvertimeModule",["enable","color"],2,4],["cc.Gradient",["alphaKeys"],3,9],["cc.SizeOvertimeModule",["enable","size","x","y","z"],2,4,4,4,4],["cc.AnimationCurve",["keyFrames"],3,9],["10c0bmcfFFEoL8tBkIF4+Vf",["node","bg"],3,1,1],["4a6c76IbcdPM44OzM2/sPU/",["node"],3,1]],[[6,0,2,3,4,2],[9,1],[0,0,7,6,8,9,2],[9,0,2],[3,0,7,2],[29,0,1,2,4],[12,2,3,1],[23,0,1,3],[25,0,1,1],[3,0,1,2,7,4],[27,0,1],[10,0,2,3,4,2],[30,0,1,3],[4,0,3,4,6,7,2],[0,0,7,6,16,8,9,2],[7,0,4,8,1,2,3,9,10,7],[45,0,1,2,3,1],[0,0,3,10,6,8,9,3],[15,0,1,2],[31,0,1,2],[8,0,3,2],[6,2,3,4,1],[8,1,3,2],[4,0,3,5,6,7,12,2],[0,0,7,6,8,9,14,2],[0,0,7,6,9,2],[6,1,0,2,3,4,3],[4,0,3,5,6,2],[0,0,1,7,6,16,8,9,3],[0,0,3,10,6,16,8,9,3],[0,0,7,6,8,2],[3,0,3,7,3],[6,0,2,3,2],[5,0,1,7,8,3],[5,0,1,7,3],[5,2,0,1,3,4,7,6],[16,0,2,3,2],[32,0,1,1],[17,0,1,2,3],[13,1],[0,0,7,6,15,8,11,12,2],[0,0,4,7,6,15,11,12,3],[0,0,10,6,8,9,2],[0,0,10,6,8,13,2],[0,0,7,6,8,11,12,2],[0,0,7,10,6,8,13,2],[0,0,10,6,8,2],[0,0,2,1,7,6,9,14,4],[14,0,1,3,2,4,5,6,7,2],[3,0,2,7,3],[3,0,1,7,3],[6,2,3,1],[34,0,1,2,1],[36,0,1,2],[17,1],[38,0,1,2,3,4,5,3],[39,0,1,2,2],[12,0,1,2,3,3],[8,3,1],[8,0,2,3,3],[9,1,2],[13,1,1],[48,0,1,2,3],[21,0,1,3],[22,1,0,2,3,5],[4,0,4,5,8,9,10,2],[4,0,3,4,5,6,11,7,2],[4,0,4,5,6,7,2],[4,0,3,5,6,7,2],[4,0,1,2,3,4,4],[4,0,1,3,4,7,3],[0,0,7,10,6,15,8,11,12,2],[0,0,7,10,6,8,13,9,2],[0,0,1,7,6,8,9,3],[0,0,1,7,6,8,9,14,3],[0,0,2,1,7,10,6,9,4],[0,0,2,1,7,6,9,4],[0,0,2,7,6,9,14,3],[0,0,3,10,6,8,11,12,9,3],[0,0,5,7,6,8,13,9,3],[0,0,7,6,11,12,9,2],[14,0,1,2,2],[24,0,1],[15,1,1],[3,0,6,5,3,4,1,2,7,8],[3,0,3,1,2,7,5],[3,0,3,4,7,4],[3,0,4,7,3],[3,0,5,4,7,4],[26,0,1,2,3,1],[10,0,1,2,3,4,3],[10,0,2,3,5,4,2],[5,2,0,1,7,8,4],[5,2,5,3,4,7,5],[5,2,0,1,6,7,5],[16,1,0,2,3,3],[28,0,1,2,3,4,5,6,7,1],[33,0,1,2,3,4],[35,0,1,2,1],[37,0,1,2,3,3],[18,4,0,1,2,3,6,7,6],[18,5,0,1,2,3,6,7,6],[11,0,1,2,3,4,5,6,6],[11,0,1,5,6,3],[11,0,1,2,5,6,4],[7,0,1,2,3,5,6,9,10,7],[7,0,7,4,1,2,3,5,6,9,10,9],[7,0,7,4,1,2,3,9,10,7],[40,0,1,2,3,4,5,6,7,7],[41,0,1,2,3,4,5],[12,0,2,3,2],[42,0,1],[43,0,1,2,3,1],[44,0,1,2,3,4,2],[46,0,1,2,3,2],[19,0,3,4,5,6,7,8,9,10,11,12,13,14,15,2],[19,0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,17,18,4],[47,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,3],[9,2,3,2],[13,0,2,2],[49,0,1,2,3,4,5,6,4],[20,0,2,1,3,8,5],[20,0,4,1,5,6,7,8,7],[50,0,1,2,3,2],[51,0,1,2],[52,0,1],[21,0,2],[53,0,1,2,3,4,2],[54,0,1],[22,0,2],[55,0,1,1],[56,0,1]],[[["0,9729,9729,33071,33071,0,0,0",-1],[1],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[7,"PeekCard-mask",null],[65,"PeekCard",[-4,-5,-6],[[-2,[82,-3]],1,4],[83,-1],[1,0,0,0],[1,1,1,1]],[17,"Canvas","a5esZu+45LA5mBpvttspPD",[-12,1],[[8,-7,[5,1280,720]],[4,45,-8],[89,-10,-9,10,11],[10,-11]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[48,"mask",1,[-14,-15],[-13],[18,"1f8fQDtQhIzrOVPRUY2TkV",1],[5,308,456],[1,0,0,0],[1,1,1,1]],[71,"cardFace",3,[-17],[[0,0,-16,[5],6]],[18,"653vIuzNlNLKOeXeLWEtbj",1],[5,308,456],[1,0,0,0],[1,1,1,1]],[40,"cardBack",3,[[0,0,-18,[0],1]],[18,"083sDemltBUaj3f+hA9XP5",1],[5,308,456],[1,0,0,0],[1,1,1,1]],[48,"shadowMask",4,[-20],[-19],[18,"cfHVHJ2iZKt5kFFNybzBa9",1],[5,308,456],[1,0,0,0],[1,1,1,1]],[40,"shadow",6,[[0,0,-21,[2],3]],[18,"05OtZfEtZBRL/Cdomhb01l",1],[5,20,20],[1,0,0,0],[1,1,1,1]],[41,"finger1",false,1,[[51,-22,[8]]],[18,"79y9MU3DJA66vW0cbrn5J0",1],[1,0,0,0],[1,1,1,1]],[41,"finger2",false,1,[[51,-23,[9]]],[18,"14JDxFFjhHVYK2SRtKW3gg",1],[1,0,0,0],[1,1,1,1]],[90,"New Node",false,[2],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[2,"Main Camera",2,[[33,7,-1,-24,[4,4282067492]]],[5,960,640],[0,0,475.44794667765683,0,0,0,1,1,1,1]],[95,2,0.3,6,[4]],[36,0,3,[7]],[96,1,13,5,4,12,7,8,9]],0,[0,12,1,0,-1,14,0,0,1,0,-1,3,0,-2,8,0,-3,9,0,0,2,0,0,2,0,13,14,0,0,2,0,0,2,0,-1,11,0,-1,13,0,-1,5,0,-2,4,0,0,4,0,-1,6,0,0,5,0,-1,12,0,-1,7,0,0,7,0,0,8,0,0,9,0,0,11,0,4,10,1,2,2,2,2,10,24],[0,0,0,0,0,0,0,0,0,0,0,0,12],[-1,1,-1,1,-1,-1,1,-1,-1,-1,14,15,1],[0,6,0,18,0,0,4,0,0,0,6,4,4]],[[{"name":"card","rect":[0,0,308,456],"offset":[0,0],"originalSize":[308,456],"capInsets":[0,0,0,0]}],[2],0,[0],[5],[19]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[5,"Streamer",[{"hash":2971403177,"record":null,"name":"Streamer|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_STREAMER\nuniform Streamer {\n  vec4 lightColor;\n  vec2 light;\n  float lightAngle;\n  float lightWidth;\n  float enableFog;\n};\nvec4 addLightColor(vec4 color, vec4 lightColor, vec2 light, float lightAngle, float lightWidth) {\n  if (lightWidth <= 0.0) {\n    return color;\n  }\n  float radians = radians(lightAngle);\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n    float offsetX = light.x - ((1.0 - light.y) / tan(radians));\n    float dx = offsetX + (1.0 - v_uv0.y) / tan(radians);\n    float offsetDis = abs(v_uv0.x - dx);\n    dis = sin(radians) * offsetDis;\n  } else {\n    dis = abs(v_uv0.y - light.y);\n  }\n  float a = 1.0 ;\n  if (bool(1.0)) {\n    a *= step(0.3, color.a);\n  }\n  if (dis <= lightWidth * 0.5) {\n    a *= 1.0 - dis / (lightWidth * 0.5);\n  } else {\n    a = 0.0;\n  }\n  if (bool(enableFog)) color = vec4(color.rgb, a);\n  lightColor = lightColor * a;\n  return color * color.a + lightColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_STREAMER\n  gl_FragColor = addLightColor(gl_FragColor, lightColor, light, lightAngle, lightWidth);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_STREAMER\nuniform vec4 lightColor;\nuniform vec2 light;\nuniform float lightAngle;\nuniform float lightWidth;\nuniform float enableFog;\nvec4 addLightColor(vec4 color, vec4 lightColor, vec2 light, float lightAngle, float lightWidth) {\n  if (lightWidth <= 0.0) {\n    return color;\n  }\n  float radians = radians(lightAngle);\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n    float offsetX = light.x - ((1.0 - light.y) / tan(radians));\n    float dx = offsetX + (1.0 - v_uv0.y) / tan(radians);\n    float offsetDis = abs(v_uv0.x - dx);\n    dis = sin(radians) * offsetDis;\n  } else {\n    dis = abs(v_uv0.y - light.y);\n  }\n  float a = 1.0 ;\n  if (bool(1.0)) {\n    a *= step(0.3, color.a);\n  }\n  if (dis <= lightWidth * 0.5) {\n    a *= 1.0 - dis / (lightWidth * 0.5);\n  } else {\n    a = 0.0;\n  }\n  if (bool(enableFog)) color = vec4(color.rgb, a);\n  lightColor = lightColor * a;\n  return color * color.a + lightColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_STREAMER\n  gl_FragColor = addLightColor(gl_FragColor, lightColor, light, lightAngle, lightWidth);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_STREAMER","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Streamer","binding":1,"members":[{"name":"lightColor","type":16,"count":1},{"name":"light","type":14,"count":1},{"name":"lightAngle","type":13,"count":1},{"name":"lightWidth","type":13,"count":1},{"name":"enableFog","type":13,"count":1}],"defines":["ENABLE_STREAMER"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Streamer|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"lightColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"流光颜色"}},"light":{"type":14,"value":[0.2,0.2],"editor":{"tooltip":"流光中心"}},"lightAngle":{"type":13,"value":[0],"editor":{"tooltip":"流光角度","range":[0,180]}},"lightWidth":{"type":13,"value":[0.2],"editor":{"tooltip":"流光宽度"}},"enableFog":{"type":13,"value":[0],"editor":{"tooltip":"是否启用迷雾效果(0:不启用 非0:启用)"}}}}]}]]],0,0,[],[],[]],[[[12,"SinLine",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[3],[20]],[[[12,"RollUv",{"0":{"defines":{"USE_TEXTURE":true},"props":{"timer":0}}}]],0,0,[0],[3],[21]],[[[19,"Streamer",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"ENABLE_STREAMER":true}},"props",11,[{"lightWidth":0.2,"enableFog":0,"lightAngle":60},"lightColor",8,[4,4289229823],"light",8,[0,0.5,0.5]]]]]],0,0,[0],[3],[22]],[[[7,"FiretunnelCase",null],[17,"Canvas","a5esZu+45LA5mBpvttspPD",[-6,-7],[[8,-1,[5,1280,720]],[4,45,-2],[37,-4,-3],[10,-5]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[27,"fire",1,[[-8,[9,45,100,100,-9]],1,4],[5,1280,720]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[2,"Main Camera",1,[[34,7,-1,-10]],[5,960,640],[0,0,472.8421421407532,0,0,0,1,1,1,1]],[32,0,2,[0]]],0,[0,0,1,0,0,1,0,7,5,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-1,5,0,0,2,0,0,4,0,4,3,1,2,3,10],[0,5],[-1,1],[23,1]],[[[97,"rotateY",1,2,[{},"props",11,[{},"eulerAngles",12,[[[{"frame":0},"value",8,[1,0,0,0]],[{"frame":1},"value",8,[1,0,360,0]]],11,11]]]]],0,0,[],[],[]],[[[5,"Wavelight",[{"hash":441056161,"record":null,"name":"Wavelight|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVELIGHT\nuniform Wavelight {\n  vec4 lightColor;\n};\nvec4 addLightColor(vec4 lightColor) {\n  float timers = cc_time.x * .5 + 5.;\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv * 6.12, 6.12) - 250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .0045;\n  for (int n = 0; n < 5; n++)\n  {\n      float t =  timers * (1.0 - (3.5 / float(n + 1)));\n      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));\n      c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  c /= float(5);\n  c = 1.17 - pow(c, 1.4);\n  vec4 tex = texture2D(texture, uv);\n  vec3 colour = vec3(pow(abs(c), 20.0));\n  colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n  float alpha = c * tex[3];\n  tex[0] = tex[0] + colour[0] * alpha;\n  tex[1] = tex[1] + colour[1] * alpha;\n  tex[2] = tex[2] + colour[2] * alpha;\n  return lightColor * tex;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVELIGHT\n    gl_FragColor = addLightColor(lightColor);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVELIGHT\nuniform vec4 lightColor;\nvec4 addLightColor(vec4 lightColor) {\n  float timers = cc_time.x * .5 + 5.;\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv * 6.12, 6.12) - 250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .0045;\n  for (int n = 0; n < 5; n++)\n  {\n      float t =  timers * (1.0 - (3.5 / float(n + 1)));\n      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));\n      c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  c /= float(5);\n  c = 1.17 - pow(c, 1.4);\n  vec4 tex = texture2D(texture, uv);\n  vec3 colour = vec3(pow(abs(c), 20.0));\n  colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n  float alpha = c * tex[3];\n  tex[0] = tex[0] + colour[0] * alpha;\n  tex[1] = tex[1] + colour[1] * alpha;\n  tex[2] = tex[2] + colour[2] * alpha;\n  return lightColor * tex;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVELIGHT\n    gl_FragColor = addLightColor(lightColor);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_WAVELIGHT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Wavelight","binding":1,"members":[{"name":"lightColor","type":16,"count":1}],"defines":["ENABLE_WAVELIGHT"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Wavelight|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"lightColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"波光颜色"}}}}]}]]],0,0,[],[],[]],[[{"name":"item","rect":[0,0,720,126],"offset":[0,0],"originalSize":[720,126],"capInsets":[259,26,273,42]}],[2],0,[0],[5],[24]],[[{"name":"default","rect":[0,0,320,320],"offset":[0,0],"originalSize":[320,320],"capInsets":[0,0,0,0]}],[2],0,[0],[5],[25]],[[{"name":"background","rect":[0,0,1920,1080],"offset":[0,0],"originalSize":[1920,1080],"capInsets":[0,0,0,0]}],[2],0,[0],[5],[26]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[12,"Gray",{"0":{"props":{"grayLev":0,"oldLev":0},"defines":{"USE_TEXTURE":true,"ENABLE_OLD":true,"ENABLE_GRAY":true}}}]],0,0,[0],[3],[27]],[[[7,"main",null],[17,"Canvas","a5esZu+45LA5mBpvttspPD",[-9,-10,-11,-12],[[8,-1,[5,1280,720]],[4,45,-2],[52,-4,-3,10],[26,1,0,-5,[11],12],[98,-8,-7,-6]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[42,"case",[-16,-17],[[26,1,0,-13,[6],7],[53,true,-14],[49,5,520,-15]],[5,300,520],[160,0,0,0,0,0,1,1,1,1]],[42,"item",[-21],[[26,1,0,-18,[3],4],[53,true,-19],[99,0.9,3,-20,[[38,"75d48lC5HlGLqTP86sGPtGS","onItemClick",1]]]],[5,300,70],[0,-35,0,0,0,0,1,1,1,0]],[66,"scrollView",1,[-26],[[[84,45,50,50,100,100,240,250,-22],[100,false,0.75,0.23,null,null,-24,-23],-25],4,4,1],[5,1180,520],[0,0,0.5],[-590,0,0,0,0,0,1,1,1,1]],[43,"content",[2],[[102,1,1,10,10,10,-27,[5,320,520]],[49,5,520,-28]],[5,320,520],[0,0,0.5]],[72,"scrollView",2,[-33],[[101,false,0.75,0.23,null,null,-30,-29],[85,45,70,240,250,-31],[55,true,3,-32,3,[54],[38,"75d48lC5HlGLqTP86sGPtGS","onItemListRender",1]]],[5,300,450],[0,0.5,1],[0,190,0,0,0,0,1,1,1,1]],[43,"content",[3],[[50,40,220,-34],[103,1,2,-35,[5,300,70]]],[5,300,70],[0,0.5,1]],[44,"Control",1,[[56,1,-36,[0]],[9,45,640,1136,-37]],[5,1280,720],[1,0,0,0],[1,1,1,1]],[45,"view",4,[5],[[36,0,-38,[8]],[9,45,240,250,-39]],[5,1180,520],[0,0,0.5]],[45,"view",6,[7],[[36,0,-40,[5]],[9,45,240,250,-41]],[5,300,450],[0,0.5,1]],[2,"title",2,[[105,"3d-cases",1,1,"宋体",2,1,-42,[1]],[31,17,10,-43]],[5,300,50.4],[0,224.8,0,0,0,0,1,1,1,1]],[2,"title",3,[[106,"敬请期待",30,32,1,1,"宋体",2,1,-44,[2]],[31,17,16.040000000000003,-45]],[5,300,40.32],[0,-1.2000000000000028,0,0,0,0,1,1,1,1]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[2,"Main Camera",1,[[33,7,-1,-46,[4,4294967295]]],[5,960,640],[0,0,473.0934401111179,0,0,0,1,1,1,1]],[55,true,3,4,2,[54],[38,"75d48lC5HlGLqTP86sGPtGS","onMainListRender",1]],[81,"touch",1,[-47]],[108,"default",0,false,false,"action",true,16,[9]]],0,[0,0,1,0,0,1,0,9,8,0,0,1,0,0,1,0,16,17,0,17,15,0,0,1,0,-1,14,0,-2,8,0,-3,4,0,-4,16,0,0,2,0,0,2,0,0,2,0,-1,11,0,-2,6,0,0,3,0,0,3,0,0,3,0,-1,12,0,0,4,0,10,5,0,0,4,0,-3,15,0,-1,9,0,0,5,0,0,5,0,10,7,0,0,6,0,0,6,0,0,6,0,-1,10,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,14,0,-1,17,0,4,13,1,2,13,2,2,5,3,2,7,5,2,9,7,2,10,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,17],[-1,-1,-1,-1,1,-1,-1,1,-1,-1,11,-1,1,18],[7,0,0,0,28,0,0,29,0,30,8,0,9,31]],[[[19,"aperture",[{},"0",11,[{"defines":{"OUTPUT_TO_GAMMA":false}},"props",11,[{},"mainTiling_Offset",8,[2,1,0.333333,0,0],"mainTexture",6,0]]]]],0,0,[0,0],[8,3],[32,10]],[[[19,"blade",[{},"0",11,[{},"props",11,[{},"mainTiling_Offset",8,[2,1,0.25,0,0.25],"mainTexture",6,0]]]]],0,0,[0,0],[8,3],[33,10]],[[[12,"FireTunnel",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[3],[34]],[[[5,"Circular",[{"hash":3337231603,"record":null,"name":"Circular|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float len = distance(v_uv0, vec2(0.5, 0.5));\n  if (len > 0.4) {\n    if (len < 0.5) {\n      o.a *= 1.0 - smoothstep(0., 0.1, len - 0.4);\n    } else {\n      o.a = 0.;\n    }\n  }\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float len = distance(v_uv0, vec2(0.5, 0.5));\n  if (len > 0.4) {\n    if (len < 0.5) {\n      o.a *= 1.0 - smoothstep(0., 0.1, len - 0.4);\n    } else {\n      o.a = 0.;\n    }\n  }\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Circular|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[12,"Circular",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[3],[35]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[12,"Mosaic",{"0":{"props":{"xBlockCount":30,"yBlockCount":30},"defines":{"USE_TEXTURE":true,"USE_MOSAIC":true}}}]],0,0,[0],[3],[36]],[[[109,"action","\r\naction.png\r\nsize: 186,293\r\nformat: RGBA8888\r\nfilter: Linear,Linear\r\nrepeat: none\r\n02\r\n  rotate: false\r\n  xy: 2, 166\r\n  size: 126, 125\r\n  orig: 180, 180\r\n  offset: 27, 27\r\n  index: -1\r\n6_0000\r\n  rotate: false\r\n  xy: 2, 2\r\n  size: 51, 48\r\n  orig: 720, 720\r\n  offset: 331, 334\r\n  index: -1\r\n6_0001\r\n  rotate: false\r\n  xy: 108, 61\r\n  size: 52, 50\r\n  orig: 720, 720\r\n  offset: 330, 333\r\n  index: -1\r\n6_0002\r\n  rotate: true\r\n  xy: 55, 2\r\n  size: 52, 51\r\n  orig: 720, 720\r\n  offset: 330, 333\r\n  index: -1\r\n6_0003\r\n  rotate: false\r\n  xy: 2, 113\r\n  size: 54, 51\r\n  orig: 720, 720\r\n  offset: 329, 333\r\n  index: -1\r\n6_0004\r\n  rotate: true\r\n  xy: 130, 172\r\n  size: 56, 54\r\n  orig: 720, 720\r\n  offset: 327, 331\r\n  index: -1\r\n6_0005\r\n  rotate: true\r\n  xy: 58, 115\r\n  size: 49, 56\r\n  orig: 720, 720\r\n  offset: 334, 330\r\n  index: -1\r\n6_0006\r\n  rotate: false\r\n  xy: 2, 52\r\n  size: 50, 59\r\n  orig: 720, 720\r\n  offset: 334, 328\r\n  index: -1\r\n6_0007\r\n  rotate: false\r\n  xy: 130, 230\r\n  size: 51, 61\r\n  orig: 720, 720\r\n  offset: 333, 327\r\n  index: -1\r\n6_0008\r\n  rotate: false\r\n  xy: 54, 56\r\n  size: 52, 55\r\n  orig: 720, 720\r\n  offset: 332, 326\r\n  index: -1\r\n6_0009\r\n  rotate: false\r\n  xy: 130, 113\r\n  size: 52, 57\r\n  orig: 720, 720\r\n  offset: 332, 325\r\n  index: -1\r\n",["action.png"],{"skeleton":{"hash":"iHs46SL3RC16UQ+wZPPcE/jYLtY","spine":"3.5.49","width":0,"height":0,"images":"./images/"},"bones":[{"name":"root"},{"name":"bone","parent":"root"},{"name":"bone2","parent":"root"},{"name":"bone7","parent":"root","length":159.27,"rotation":180}],"slots":[{"name":"02","bone":"bone","blend":"additive"},{"name":"022","bone":"bone2","blend":"additive"},{"name":"6_0000","bone":"bone7","blend":"additive"}],"skins":{"default":{"02":{"02":{"width":180,"height":180}},"022":{"02":{"width":180,"height":180}},"6_0000":{"6_0000":{"rotation":180,"width":720,"height":720},"6_0001":{"rotation":180,"width":720,"height":720},"6_0002":{"rotation":180,"width":720,"height":720},"6_0003":{"rotation":180,"width":720,"height":720},"6_0004":{"rotation":180,"width":720,"height":720},"6_0005":{"rotation":180,"width":720,"height":720},"6_0006":{"rotation":180,"width":720,"height":720},"6_0007":{"rotation":180,"width":720,"height":720},"6_0008":{"rotation":180,"width":720,"height":720},"6_0009":{"rotation":180,"width":720,"height":720}}}},"animations":{"action":{"slots":{"02":{"color":[{"time":0,"color":"ffffff00"},{"time":0.1667,"color":"ffffffff"},{"time":0.5,"color":"ffffff00"}],"attachment":[{"time":0,"name":"02"}]},"022":{"color":[{"time":0.1667,"color":"ffffff00"},{"time":0.3333,"color":"ffffffff"},{"time":0.8333,"color":"ffffff00"}],"attachment":[{"time":0.1667,"name":"02"}]},"6_0000":{"color":[{"time":0,"color":"ffffff00"},{"time":0.1,"color":"ffffffff","curve":"stepped"},{"time":0.7,"color":"ffffffff"},{"time":0.9,"color":"ffffff00"}],"attachment":[{"time":0,"name":"6_0000"},{"time":0.1,"name":"6_0001"},{"time":0.2,"name":"6_0002"},{"time":0.3,"name":"6_0003"},{"time":0.4,"name":"6_0004"},{"time":0.5,"name":"6_0005"},{"time":0.6,"name":"6_0006"},{"time":0.7,"name":"6_0007"},{"time":0.8,"name":"6_0008"},{"time":0.9,"name":"6_0009"}]}},"bones":{"bone":{"scale":[{"time":0,"x":0.4,"y":0.4},{"time":0.1667,"x":0.8,"y":0.8},{"time":0.5,"x":1.2,"y":1.2}]},"bone2":{"scale":[{"time":0.1667,"x":0.4,"y":0.4},{"time":0.3333,"x":0.8,"y":0.8},{"time":0.8333,"x":1.2,"y":1.2}]}}}}},[0]]],0,0,[0],[-1],[37]],[[[7,"RigidBody-demo",null],[67,"body",[-4,-5,-6,-7,-8,-9,-10,-11,-12,-13],[[[0,0,-1,[30],31],-2,[6,-3,[5,10,80]]],4,1,4],[5,10,80],[-508.604,120.159,0,0,0,0,1,1,1,1]],[46,"bg",[-15,-16,-17,-18,-19,1],[[4,45,-14]],[5,1280,720]],[17,"Canvas","e74EXg0rtCjLjdvGkqrBRc",[-24,2],[[8,-20,[5,1280,720]],[4,45,-21],[111,-22],[10,-23]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[20,-0.1,1],[73,"wall",1,2,[[0,0,-25,[0],1],[31,1,20,-26],[22,1,-27],[6,-28,[5,1200,10]]],[5,1200,10],[0,335,0,0,0,0,1,1,1,1]],[74,"ramp",1,2,[[0,0,-29,[2],3],[86,4,533.033,106,-30],[22,1,-31],[110,0.1,-32,[5,960,10]]],[5,960,10],[-149.261,-249,0,0,0,-0.08715574274765817,0.9961946980917455,1,1,1],[1,0,0,-10]],[28,"wall",1,2,[[0,0,-33,[4],5],[87,4,10,-34],[22,1,-35],[6,-36,[5,1200,10]]],[4,4278190080],[5,1200,10],[0,-345,0,0,0,0,1,1,1,1]],[28,"wall",1,2,[[0,0,-37,[6],7],[4,32,-38],[22,1,-39],[6,-40,[5,10,640]]],[4,4278190080],[5,10,640],[635,0,0,0,0,0,1,1,1,1]],[28,"wall",1,2,[[0,0,-41,[8],9],[4,8,-42],[22,1,-43],[6,-44,[5,10,640]]],[4,4278190080],[5,10,640],[-635,0,0,0,0,0,1,1,1,1]],[2,"head",1,[[0,0,-45,[10],11],[20,-0.2,-46],[6,-47,[5,18,18]],[112,-49,[0,-0.4,-11.6],[0,0.3,-0.3],-48]],[5,18,18],[1.094,57.846,0,0,0,0,1,1,1,1]],[68,"neck",1,[[[0,0,-50,[12],13],-51,[6,-52,[5,5,18]],[113,2,-53,[0,0.1,-7.3],[0,0.6,39],4]],4,1,4,4],[5,5,18],[0.165,46.563,0,0,0,0,1,1,1,1]],[23,"left_up_arm",1,[[[0,0,-54,[14],15],-55,[6,-56,[5,5,30]],[16,-57,[0,0.1,13.4],[0,0.4,34.9],4]],4,1,4,4],[5,5,30],[7.015,23.01,0,0,0,0.25881904510252074,0.9659258262890683,1,1,1],[1,0,0,30]],[24,"left_low_arm",1,[[0,0,-58,[16],17],[20,0,-59],[6,-60,[5,5,30]],[16,-62,[0,-0.1,13.9],[0,0.2,-13],-61]],[5,5,30],[20.405,0.388,0,0,0,0.25881904510252074,0.9659258262890683,1,1,1],[1,0,0,30]],[23,"right_up_arm",1,[[[0,0,-63,[18],19],-64,[6,-65,[5,5,30]],[16,-66,[0,0.1,13.4],[0,0.4,34.9],4]],4,1,4,4],[5,5,30],[-6.241,23.01,0,0,0,-0.25881904510252074,0.9659258262890683,1,1,1],[1,0,0,-30]],[24,"right_low_arm",1,[[0,0,-67,[20],21],[20,0,-68],[6,-69,[5,5,30]],[16,-71,[0,-0.1,13.9],[0,0.2,-13],-70]],[5,5,30],[-10.339,-1.868,0,0,0,0.08715574274765817,0.9961946980917455,1,1,1],[1,0,0,10]],[23,"left_leg",1,[[[0,0,-72,[22],23],-73,[6,-74,[5,5,45]],[16,-75,[0,0.3,20],[0,1.4,-39],4]],4,1,4,4],[5,5,45],[6.01,-58.313,0,0,0,0.13052619222005157,0.9914448613738104,1,1,1],[1,0,0,15]],[24,"left_crus",1,[[0,0,-76,[24],25],[58,-77],[57,0.3,1,-78,[5,5,50]],[16,-80,[0,-0.1,23.1],[0,0,-20],-79]],[5,5,50],[15.421,-100.471,0,0,0,0.08715574274765817,0.9961946980917455,1,1,1],[1,0,0,10]],[23,"right_leg ",1,[[[0,0,-81,[26],27],-82,[6,-83,[5,5,45]],[16,-84,[0,0.3,20],[0,1.4,-39],4]],4,1,4,4],[5,5,45],[-3.889,-58.6,0,0,0,-0.13052619222005157,0.9914448613738104,1,1,1],[1,0,0,-15]],[24,"right_crus ",1,[[0,0,-85,[28],29],[58,-86],[57,0.3,1,-87,[5,5,50]],[16,-89,[0,-0.1,23.1],[0,0,-20],-88]],[5,5,50],[-18.517,-98.541,0,0,0,-0.21643961393810288,0.9762960071199334,1,1,1],[1,0,0,-25]],[11,"New Node",[3],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[25,"Main Camera",3,[[34,7,-1,-90]],[0,0,476.3139720814413,0,0,0,1,1,1,1]],[20,0,11],[20,0,12],[20,0,14],[59,-0.2,true,16],[59,-0.2,true,18]],0,[0,0,1,0,-2,4,0,0,1,0,-1,10,0,-2,11,0,-3,12,0,-4,13,0,-5,14,0,-6,15,0,-7,16,0,-8,17,0,-9,18,0,-10,19,0,0,2,0,-1,5,0,-2,6,0,-3,7,0,-4,8,0,-5,9,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,21,0,0,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,6,22,0,0,10,0,0,11,0,-2,22,0,0,11,0,0,11,0,0,12,0,-2,23,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,6,23,0,0,13,0,0,14,0,-2,24,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,6,24,0,0,15,0,0,16,0,-2,25,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,6,25,0,0,17,0,0,18,0,-2,26,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,6,26,0,0,19,0,0,21,0,4,20,1,2,2,2,2,3,3,2,20,90],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]],[[[7,"WavelightCase",null],[29,"Canvas","a286bbGknJLZpRpxROV6M94",[-4,-5],[[8,-1,[5,1280,720]],[4,45,-2],[10,-3]],[4,4294769916],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[30,"bg",1,[[0,0,-6,[0],1],[9,45,200,150,-7]],[5,1280,720]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[25,"Main Camera",1,[[35,-3,7,-1,false,false,-8]],[0,0,623.5382907247958,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,0,2,0,0,2,0,0,4,0,4,3,1,2,3,8],[0,0],[-1,1],[38,5]],[[[5,"Wave",[{"hash":1742949722,"record":null,"name":"Wave|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVE\nuniform Water {\n  vec2 iResolution;\n};\nvec2 s(vec2 p)\n{\n    float d = cc_time.x * 0.4, x = 8. * (p.x + d), y = 8.*(p.y + d);\n    return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 rs = iResolution.xy;\n    vec2 uv = fragCoord;\n    vec2 q = uv + 2. / iResolution.x * (s(uv) - s(uv + rs));\n    fragColor = texture2D(texture, q);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVE\n    mainImage(gl_FragColor, v_uv0.xy);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVE\nuniform vec2 iResolution;\nvec2 s(vec2 p)\n{\n    float d = cc_time.x * 0.4, x = 8. * (p.x + d), y = 8.*(p.y + d);\n    return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 rs = iResolution.xy;\n    vec2 uv = fragCoord;\n    vec2 q = uv + 2. / iResolution.x * (s(uv) - s(uv + rs));\n    fragColor = texture2D(texture, q);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVE\n    mainImage(gl_FragColor, v_uv0.xy);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_WAVE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Water","binding":1,"members":[{"name":"iResolution","type":14,"count":1}],"defines":["ENABLE_WAVE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Wave|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"iResolution":{"type":14,"value":[1280,720],"editor":{"tooltip":"图片分辨率"}}}}]}]]],0,0,[],[],[]],[[[5,"Gray",[{"hash":956674703,"record":null,"name":"Gray|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_OLD\nuniform OldLevel {\n  float oldLev;\n};\nvec4 getOldColor(vec4 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec4(r, g, b, color.a);\n}\n#endif\n#if ENABLE_GRAY\nuniform GrayLevel {\n  float grayLev;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_OLD\n    vec4 srcColor = o;\n    vec4 oldColor = getOldColor(srcColor);\n    o = mix(srcColor, oldColor, oldLev);\n  #endif\n  #if ENABLE_GRAY\n    vec4 srcColor2 = o;\n    float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n    vec4 grayColor = vec4(gray, gray, gray, o.a);\n    o = mix(srcColor2, grayColor, grayLev);\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_OLD\nuniform float oldLev;\nvec4 getOldColor(vec4 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec4(r, g, b, color.a);\n}\n#endif\n#if ENABLE_GRAY\nuniform float grayLev;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_OLD\n    vec4 srcColor = o;\n    vec4 oldColor = getOldColor(srcColor);\n    o = mix(srcColor, oldColor, oldLev);\n  #endif\n  #if ENABLE_GRAY\n    vec4 srcColor2 = o;\n    float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n    vec4 grayColor = vec4(gray, gray, gray, o.a);\n    o = mix(srcColor2, grayColor, grayLev);\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_OLD","type":"boolean","defines":[]},{"name":"ENABLE_GRAY","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"OldLevel","binding":1,"members":[{"name":"oldLev","type":13,"count":1}],"defines":["ENABLE_OLD"]},{"name":"GrayLevel","binding":2,"members":[{"name":"grayLev","type":13,"count":1}],"defines":["ENABLE_GRAY"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Gray|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"oldLev":{"type":13,"value":[1],"editor":{"tooltip":"老化程度","range":[-2,2]}},"grayLev":{"type":13,"value":[1],"editor":{"tooltip":"灰化程度","range":[-5,5]}}}}]}]]],0,0,[],[],[]],[[[5,"MechaSpace",[{"hash":1222240464,"record":null,"name":"MechaSpace|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  vec2 resolution;\n};\nfloat time = cc_time.x;\nmat2 rot(float r){\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n}\nvec2 pmod(vec2 p, float n){\n  float np = 3.1415*2./n;\n  float r = atan(p.y,p.x)-0.5*np;\n  r = mod(r,np)-0.5*np;\n  return length(p)*vec2(cos(r),sin(r));\n}\nfloat cube(vec3 p,vec3 s){\n  vec3 q = abs(p);\n  vec3 m = max(s-q,0.);\n  return length(max(q-s,0.))-min(min(m.x,m.y),m.z);\n}\nfloat crossBox(vec3 p,float s){\n  float m1 = cube(p,vec3(s,s,99999.));\n  float m2 = cube(p,vec3(99999.,s,s));\n  float m3 = cube(p,vec3(s,99999.,s));\n  return min(min(m1,m2),m3);\n}\nfloat dist(vec3 p){\n  p.xy *= rot(time*0.2);\n  p.z += time;\n  p.xy = pmod(p.xy,6.);\n  for(int i  =0;i<4;i++){\n    p = abs(p)-1.;\n    p.xz *= rot(0.3);\n  }\n  float k = 0.6;\n  p = mod(p,k)-0.5*k;\n  return min(crossBox(p,0.02),cube(p,vec3(0.1)));\n}\nvoid main () {\n  vec2 p = ( gl_FragCoord.xy / resolution.xy );\np = (p-0.5)*2.;\np.x *= resolution.x/resolution.y;\np *= rot(time*0.0);\nvec3 ro = vec3(cos(time/2.),0.7,0.7);\nvec3 rd = normalize(vec3(p,0.)-ro);\nfloat d,t=2.;\nfloat ac = 0.;\nfor(int i = 0;i<50;i++){\n  d = dist(ro+rd*t);\n  t += d;\n  ac += exp(-4.0*d);\n  if(d<0.01) break;\n}\nfloat cl = exp(-1.0*t);\nvec3 col = vec3(0.7,0.7,0.2)*0.05*vec3(ac);\ncol += vec3(0,0.3,0.3);\ncol = pow(col,vec3(0.7));\nif(d<0.01) col +=vec3(0.4,0.8,0.9)*0.01/abs(mod((ro+rd*t).z,1.0)-0.5);\ngl_FragColor = vec4(col, 1.0 );\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 resolution;\nfloat time = cc_time.x;\nmat2 rot(float r){\n  return mat2(cos(r),sin(r),-sin(r),cos(r));\n}\nvec2 pmod(vec2 p, float n){\n  float np = 3.1415*2./n;\n  float r = atan(p.y,p.x)-0.5*np;\n  r = mod(r,np)-0.5*np;\n  return length(p)*vec2(cos(r),sin(r));\n}\nfloat cube(vec3 p,vec3 s){\n  vec3 q = abs(p);\n  vec3 m = max(s-q,0.);\n  return length(max(q-s,0.))-min(min(m.x,m.y),m.z);\n}\nfloat crossBox(vec3 p,float s){\n  float m1 = cube(p,vec3(s,s,99999.));\n  float m2 = cube(p,vec3(99999.,s,s));\n  float m3 = cube(p,vec3(s,99999.,s));\n  return min(min(m1,m2),m3);\n}\nfloat dist(vec3 p){\n  p.xy *= rot(time*0.2);\n  p.z += time;\n  p.xy = pmod(p.xy,6.);\n  for(int i  =0;i<4;i++){\n    p = abs(p)-1.;\n    p.xz *= rot(0.3);\n  }\n  float k = 0.6;\n  p = mod(p,k)-0.5*k;\n  return min(crossBox(p,0.02),cube(p,vec3(0.1)));\n}\nvoid main () {\n  vec2 p = ( gl_FragCoord.xy / resolution.xy );\np = (p-0.5)*2.;\np.x *= resolution.x/resolution.y;\np *= rot(time*0.0);\nvec3 ro = vec3(cos(time/2.),0.7,0.7);\nvec3 rd = normalize(vec3(p,0.)-ro);\nfloat d,t=2.;\nfloat ac = 0.;\nfor(int i = 0;i<50;i++){\n  d = dist(ro+rd*t);\n  t += d;\n  ac += exp(-4.0*d);\n  if(d<0.01) break;\n}\nfloat cl = exp(-1.0*t);\nvec3 col = vec3(0.7,0.7,0.2)*0.05*vec3(ac);\ncol += vec3(0,0.3,0.3);\ncol = pow(col,vec3(0.7));\nif(d<0.01) col +=vec3(0.4,0.8,0.9)*0.01/abs(mod((ro+rd*t).z,1.0)-0.5);\ngl_FragColor = vec4(col, 1.0 );\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Params","binding":1,"members":[{"name":"resolution","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"MechaSpace|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"resolution":{"type":14,"value":[1280,720]}}}]}]]],0,0,[],[],[]],[[[5,"Spotlight",[{"hash":1939494585,"record":null,"name":"Spotlight|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_DIFFUSION\nuniform Diffusion {\n  vec4 spotColor;\n  vec2 spot;\n  float radius;\n  float enableFog;\n};\nvec4 addLightColor(vec4 color, vec2 spot, float radius, vec4 spotColor) {\n  float dis = distance(v_uv0, spot);\n  float a = 1.0;\n  if (bool(1.0)) {\n    a *= step(0.01, color.a);\n  }\n  if (dis <= radius) {\n    a *= 1.0 - (dis / radius);\n  } else {\n    a = 0.0;\n  }\n  spotColor = spotColor * a;\n  if (bool(enableFog)) color = vec4(color.rgb, a);\n  return color + spotColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_DIFFUSION\n    gl_FragColor = addLightColor(gl_FragColor, spot, radius, spotColor);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_DIFFUSION\nuniform vec4 spotColor;\nuniform vec2 spot;\nuniform float radius;\nuniform float enableFog;\nvec4 addLightColor(vec4 color, vec2 spot, float radius, vec4 spotColor) {\n  float dis = distance(v_uv0, spot);\n  float a = 1.0;\n  if (bool(1.0)) {\n    a *= step(0.01, color.a);\n  }\n  if (dis <= radius) {\n    a *= 1.0 - (dis / radius);\n  } else {\n    a = 0.0;\n  }\n  spotColor = spotColor * a;\n  if (bool(enableFog)) color = vec4(color.rgb, a);\n  return color + spotColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_DIFFUSION\n    gl_FragColor = addLightColor(gl_FragColor, spot, radius, spotColor);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_DIFFUSION","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Diffusion","binding":1,"members":[{"name":"spotColor","type":16,"count":1},{"name":"spot","type":14,"count":1},{"name":"radius","type":13,"count":1},{"name":"enableFog","type":13,"count":1}],"defines":["ENABLE_DIFFUSION"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Spotlight|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"spotColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"扩散颜色"}},"spot":{"type":14,"value":[0.5,0.5],"editor":{"tooltip":"扩散坐标"}},"radius":{"type":13,"value":[0.2],"editor":{"tooltip":"扩散半径"}},"enableFog":{"type":13,"value":[0],"editor":{"tooltip":"是否启用迷雾效果(0:不启用 非0:启用)"}}}}]}]]],0,0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[{"name":"default_panel","rect":[0,0,20,20],"offset":[0,0],"originalSize":[20,20],"capInsets":[6,6,6,6]}],[2],0,[0],[5],[39]],[[{"name":"back","rect":[0,0,308,456],"offset":[0,0],"originalSize":[308,456],"capInsets":[0,0,0,0]}],[2],0,[0],[5],[40]],[[{"name":"default_sprite_splash","rect":[0,0,2,2],"offset":[0,0],"originalSize":[2,2],"capInsets":[0,0,0,0]}],[2],0,[0],[5],[41]],[[[7,"MechaspaceCase",null],[17,"Canvas","a5esZu+45LA5mBpvttspPD",[-6,-7],[[8,-1,[5,1280,720]],[4,45,-2],[37,-4,-3],[10,-5]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[27,"mecha",1,[[-8,[9,45,100,100,-9]],1,4],[5,1280,720]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[2,"Main Camera",1,[[34,7,-1,-10]],[5,960,640],[0,0,532.0372941561963,0,0,0,1,1,1,1]],[32,0,2,[0]]],0,[0,0,1,0,0,1,0,7,5,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-1,5,0,0,2,0,0,4,0,4,3,1,2,3,10],[0,5],[-1,1],[42,1]],[[[7,"WaveCase",null],[29,"Canvas","a286bbGknJLZpRpxROV6M94",[-4,-5],[[8,-1,[5,1280,720]],[4,45,-2],[10,-3]],[4,4294769916],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[30,"bg",1,[[0,0,-6,[0],1],[9,45,200,150,-7]],[5,1280,720]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[25,"Main Camera",1,[[35,-3,7,-1,false,false,-8]],[0,0,623.5382907247958,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,0,2,0,0,2,0,0,4,0,4,3,1,2,3,8],[0,0],[-1,1],[43,5]],[[[19,"Spotlight",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"ENABLE_DIFFUSION":true,"USE_ALPHA_TEST":false}},"props",11,[{"radius":0.3,"enableFog":1},"spotColor",8,[4,65418]]]]]],0,0,[0],[3],[44]],[[[7,"ParticleCase",null],[17,"Canvas","a5esZu+45LA5mBpvttspPD",[-4,-5],[[8,-1,[5,1280,720]],[4,45,-2],[10,-3]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[69,"3DStage",true,1,1,[-6,-7,-8]],[75,"streakNode",true,1,2,[-10],[[114,true,-9,[3],2]],[-379.572,-237.067,-191.061,0,0,0,1,1,1,1]],[70,"apertureNode",true,2,[-11,-12],[0,0,130,0,0,0,1,1,1,1]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[2,"Main Camera",1,[[92,-3,7,-1,-13,[4,4282067492]]],[5,960,640],[0,0,533.4716487312143,0,0,0,1,1,1,1]],[47,"3D Camera",true,1,2,[[93,2,1024,false,false,-14]],[-6.377,193.387,350.333,-0.25881904510252074,0,0,0.9659258262890683,1,1,1],[1,-30,0,0]],[76,"streakParticle",true,1,3,[[115,1,-15,[0,1],[1],[3,1],[39],[3,1],[1],[1],[1],[1],[1],[[62,1,1,[3,1]]],[120,true,0.12,false,[3,1],[3,10],[39],[39]]]],[100,0,0,0,0,0,1,100,100,100]],[47,"aperture",true,1,4,[[117,1,2,-16,[[4,null],6,0],[1],[3,1],[61,[4,2147509503]],[3,20],[1],[60,6.2],[1],[1],[1],[[62,1,1,[3,1]]],[121,true,3,0.01,0,[1]],[123,true,[60,8.7],[1],[3,57]]]],[0,0,0,0.7071067811865475,0,0,0.7071067811865476,10,10,10],[1,90,0,0]],[77,"blade",true,4,[[116,0.5,1,0.01,-17,[5],[1],[3,0.5],[61,[4,4278215935]],[3,1.5],[3,-10],[1],[1],[3,100],[1],[122,true,2,4.8,0,0,5.312,[3,1]],[124,true,[119,1,[125,[[126,0],[63,255,0.5],[63,0,1]]]]],[127,true,[118,1,[128,[[129,0.15],[64,0.44,0.9,2.42,2.42],[64,0.99,0.17,-0.31,1.23]]]],[1],[1],[1]]]],[2.366,5,0.44,4.329780281177466e-17,0.7071067811865475,0.7071067811865476,4.329780281177467e-17,10,10,10],[1,90,0,180]]],0,[0,0,1,0,0,1,0,0,1,0,-1,6,0,-2,2,0,-1,7,0,-2,3,0,-3,4,0,0,3,0,-1,8,0,-1,9,0,-2,10,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,4,5,1,2,5,17],[0,0,0,0,0,0],[-1,-2,19,-1,-1,-1],[45,46,11,11,47,48]],[[[12,"RoundEdge",{"0":{"props":{"radius":0.2},"defines":{"USE_TEXTURE":true,"INPUT_IS_GAMMA":false,"ENABLE_ROUNDEDGE":true}}}]],0,0,[0],[3],[49]],[[[12,"MechaSpace",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[3],[50]],[[[5,"FireTunnel",[{"hash":2890977927,"record":null,"name":"FireTunnel|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  vec2 resolution;\n};\nvec3 iResolution = vec3(resolution, 1.0);\nfloat iGlobalTime = cc_time.x -60.;\nfloat hash(in float n){ return fract(sin(n)*43758.5453); }\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\nvec3 path(in float t){return vec3(sin(t*.3),sin(t*0.25),0.)*0.3;}\nmat2 m2 = mat2( 0.970,  0.242, -0.242,  0.970 );\nfloat triNoise3d(in vec3 p)\n{\n  float z=1.5;\n  float rz = 0.;\n  vec3 bp = p;\n  for (float i=0.; i<=3.; i++ )\n  {\n        vec3 dg = tri3(bp*2.)*1.;\n        p += (dg+iGlobalTime*2.*0.25);\n        bp *= 1.8;\n    z *= 1.5;\n    p *= 1.1;\n        p.xz*= m2;\n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n  }\n  return rz;\n}\nfloat map(vec3 p)\n{\n    p -= path(p.z);\n    float d = 1.-length(p.xy);\n    return d;\n}\nfloat march(in vec3 ro, in vec3 rd)\n{\n  float precis = 0.001;\n    float h=precis*2.0;\n    float d = 0.;\n    float id = 0.;;\n    for( int i=0; i<50; i++ )\n    {\n        if( abs(h)<precis || d>25. ) break;\n        d += h;\n      float res = map(ro+rd*d);\n        h = res;\n    }\n  return d;\n}\nfloat mapVol(vec3 p)\n{\n    p -= path(p.z);\n    float d = 1.-length(p.xy);\n    d -= triNoise3d(p*0.15)*1.2;\n    return d*0.55;\n}\nvec4 marchVol( in vec3 ro, in vec3 rd )\n{\n  vec4 rz = vec4(0);\n  float t = 0.3;\n  for(int i=0; i<20; i++)\n  {\n    if(rz.a > 0.99)break;\n    vec3 pos = ro + t*rd;\n        float r = mapVol( pos );\n        float gr =  clamp((r - mapVol(pos+vec3(.0,.1,.5)))/.5, 0., 1. );\n        vec3 lg = vec3(0.7,0.5,.1)*1.2 + 3.*vec3(1)*gr;\n        vec4 col = vec4(lg,r+0.55);\n    col.a *= .2;\n    col.rgb *= col.a;\n    rz = rz + col*(1. - rz.a);\n    t += 0.05;\n  }\n  rz.b += rz.w*0.2;\n    rz.rg *= mm2(-rd.z*0.09);\n    rz.rb *= mm2(-rd.z*0.13);\n  return clamp(rz, 0.0, 1.0);\n}\nvoid main () {\n  vec2 p = gl_FragCoord.xy/iResolution.xy-0.5;\np.x*=iResolution.x/iResolution.y;\np += vec2(hash(iGlobalTime*2.),hash(iGlobalTime*2.+1.))*0.008;\n  float dz = sin(iGlobalTime*2.*.3)*8.+1.;\n  vec3 ro = path(iGlobalTime*2.*5.+dz)*.7+vec3(0,0,iGlobalTime*2.*5.);\n  vec3 tgt = vec3(0,0,iGlobalTime*2.*5.+10.);\n  vec3 eye = normalize( tgt - ro);\n  vec3 rgt = normalize(cross( vec3(0.0,1.0,0.0), eye ));\n  vec3 up = normalize(cross(eye,rgt));\n  vec3 rd = normalize( p.x*rgt + p.y*up + .75*eye );\nfloat rz = march(ro,rd);\n  vec3 pos = ro+rz*rd;\n  vec4 col = marchVol(pos,rd);\n  vec3 ligt = normalize( vec3(-.0, 0., -1.) );\n  vec2 spi = vec2(sin(iGlobalTime*2.),cos(iGlobalTime*2.))*1.;\n  float flick = clamp(1.-abs(((pos.z-iGlobalTime*2.*5.)*0.3+mod(iGlobalTime*2.*5.,30.))-15.),0.,1.)*clamp(dot(pos.xy,spi),0.,1.)*1.7;\n  col.rgb += flick*(step(mod(iGlobalTime*2.,2.5),0.2))*.4;\n  col.rgb += flick*(step(mod(iGlobalTime*2.*1.5,3.2),0.2))*.4;\n  col.rgb = mix(col.rgb*col.rgb,col.rgb*1.2,(1.-col.w)*step(tri(iGlobalTime*2.*.25),0.1)*smoothstep(0.5,1.,2.*tri(iGlobalTime*2.)));\ngl_FragColor = vec4( col.rgb, 1.0 );\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 resolution;\nvec3 iResolution = vec3(resolution, 1.0);\nfloat iGlobalTime = cc_time.x -60.;\nfloat hash(in float n){ return fract(sin(n)*43758.5453); }\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\nvec3 path(in float t){return vec3(sin(t*.3),sin(t*0.25),0.)*0.3;}\nmat2 m2 = mat2( 0.970,  0.242, -0.242,  0.970 );\nfloat triNoise3d(in vec3 p)\n{\n  float z=1.5;\n  float rz = 0.;\n  vec3 bp = p;\n  for (float i=0.; i<=3.; i++ )\n  {\n        vec3 dg = tri3(bp*2.)*1.;\n        p += (dg+iGlobalTime*2.*0.25);\n        bp *= 1.8;\n    z *= 1.5;\n    p *= 1.1;\n        p.xz*= m2;\n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n  }\n  return rz;\n}\nfloat map(vec3 p)\n{\n    p -= path(p.z);\n    float d = 1.-length(p.xy);\n    return d;\n}\nfloat march(in vec3 ro, in vec3 rd)\n{\n  float precis = 0.001;\n    float h=precis*2.0;\n    float d = 0.;\n    float id = 0.;;\n    for( int i=0; i<50; i++ )\n    {\n        if( abs(h)<precis || d>25. ) break;\n        d += h;\n      float res = map(ro+rd*d);\n        h = res;\n    }\n  return d;\n}\nfloat mapVol(vec3 p)\n{\n    p -= path(p.z);\n    float d = 1.-length(p.xy);\n    d -= triNoise3d(p*0.15)*1.2;\n    return d*0.55;\n}\nvec4 marchVol( in vec3 ro, in vec3 rd )\n{\n  vec4 rz = vec4(0);\n  float t = 0.3;\n  for(int i=0; i<20; i++)\n  {\n    if(rz.a > 0.99)break;\n    vec3 pos = ro + t*rd;\n        float r = mapVol( pos );\n        float gr =  clamp((r - mapVol(pos+vec3(.0,.1,.5)))/.5, 0., 1. );\n        vec3 lg = vec3(0.7,0.5,.1)*1.2 + 3.*vec3(1)*gr;\n        vec4 col = vec4(lg,r+0.55);\n    col.a *= .2;\n    col.rgb *= col.a;\n    rz = rz + col*(1. - rz.a);\n    t += 0.05;\n  }\n  rz.b += rz.w*0.2;\n    rz.rg *= mm2(-rd.z*0.09);\n    rz.rb *= mm2(-rd.z*0.13);\n  return clamp(rz, 0.0, 1.0);\n}\nvoid main () {\n  vec2 p = gl_FragCoord.xy/iResolution.xy-0.5;\np.x*=iResolution.x/iResolution.y;\np += vec2(hash(iGlobalTime*2.),hash(iGlobalTime*2.+1.))*0.008;\n  float dz = sin(iGlobalTime*2.*.3)*8.+1.;\n  vec3 ro = path(iGlobalTime*2.*5.+dz)*.7+vec3(0,0,iGlobalTime*2.*5.);\n  vec3 tgt = vec3(0,0,iGlobalTime*2.*5.+10.);\n  vec3 eye = normalize( tgt - ro);\n  vec3 rgt = normalize(cross( vec3(0.0,1.0,0.0), eye ));\n  vec3 up = normalize(cross(eye,rgt));\n  vec3 rd = normalize( p.x*rgt + p.y*up + .75*eye );\nfloat rz = march(ro,rd);\n  vec3 pos = ro+rz*rd;\n  vec4 col = marchVol(pos,rd);\n  vec3 ligt = normalize( vec3(-.0, 0., -1.) );\n  vec2 spi = vec2(sin(iGlobalTime*2.),cos(iGlobalTime*2.))*1.;\n  float flick = clamp(1.-abs(((pos.z-iGlobalTime*2.*5.)*0.3+mod(iGlobalTime*2.*5.,30.))-15.),0.,1.)*clamp(dot(pos.xy,spi),0.,1.)*1.7;\n  col.rgb += flick*(step(mod(iGlobalTime*2.,2.5),0.2))*.4;\n  col.rgb += flick*(step(mod(iGlobalTime*2.*1.5,3.2),0.2))*.4;\n  col.rgb = mix(col.rgb*col.rgb,col.rgb*1.2,(1.-col.w)*step(tri(iGlobalTime*2.*.25),0.1)*smoothstep(0.5,1.,2.*tri(iGlobalTime*2.)));\ngl_FragColor = vec4( col.rgb, 1.0 );\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Params","binding":1,"members":[{"name":"resolution","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"FireTunnel|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"resolution":{"type":14,"value":[1280,720]}}}]}]]],0,0,[],[],[]],[[[5,"GaussianBlur",[{"hash":3167973982,"record":null,"name":"GaussianBlur|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_GAUSSIANBLUR\n        uniform GaussianBlur{\n    vec2 blurDensity;\n  };\n  float getWeight(float x, float y) {\n    return (1.0 / (2.0 * 3.141592653589793 * pow(1.5, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(1.5, 2.0)));\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_GAUSSIANBLUR\n    const float size = floor(1.5 * 6.0 + 1.0);\n    const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n        totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n        totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);\n    float onePxWidth = 1.0 / blurDensity.x;\n    float onePxHeight = 1.0 / blurDensity.y;\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        finalColor += texture(texture, v_uv0 + vec2(onePxWidth * x, onePxHeight * y)) * weight;\n      }\n    }\n    gl_FragColor = finalColor;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_GAUSSIANBLUR\n        uniform vec2 blurDensity;\n  float getWeight(float x, float y) {\n    return (1.0 / (2.0 * 3.141592653589793 * pow(1.5, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(1.5, 2.0)));\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_GAUSSIANBLUR\n    const float size = floor(1.5 * 6.0 + 1.0);\n    const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n        totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n        totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);\n    float onePxWidth = 1.0 / blurDensity.x;\n    float onePxHeight = 1.0 / blurDensity.y;\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        finalColor += texture2D(texture, v_uv0 + vec2(onePxWidth * x, onePxHeight * y)) * weight;\n      }\n    }\n    gl_FragColor = finalColor;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_GAUSSIANBLUR","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"GaussianBlur","binding":1,"members":[{"name":"blurDensity","type":14,"count":1}],"defines":["ENABLE_GAUSSIANBLUR"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"GaussianBlur|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"blurDensity":{"type":14,"value":[100,100],"editor":{"tooltip":"模糊精度, 越小越模糊"}}}}]}]]],0,0,[],[],[]],[[{"name":"shadow","rect":[0,0,20,20],"offset":[0,0],"originalSize":[20,20],"capInsets":[0,0,0,0]}],[2],0,[0],[5],[51]],[[[7,"three.js-demo",null],[78,"Canvas","07aKRq3y1AZ78BLCANAPcW",[-7,-8,-9],[[8,-1,[5,1280,720]],[9,45,1280,720,-2],[52,-4,-3,2],[26,1,0,-5,[3],4],[10,-6]],[5,1280,720],[1,667,375,0],[1,1,1,1],[640,360,0,0,0,0,1,1,1,1]],[44,"Control",1,[[56,1,-10,[0]],[9,45,640,1136,-11]],[5,1280,720],[1,0,0,0],[1,1,1,1]],[79,"New Label",150,1,[[107,"长按加速",30,32,1,1,"宋体",-12,[1]],[88,36,5,40,-13]],[5,120,40.32],[0,1,0],[635,-320,0,0,0,0,1,1,1,1]],[91,"New Node",[1],[0,0,0],[1,1,1,1],[0,0,0,0,0,0,1,1,1,1]],[80,"Main Camera",1,[[94,-3,7,-1,10,-14]],[1,0,0,360.8923137078945],[1,1,1,1],[0,0,476.3139720814413,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,9,2,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,2,0,-3,3,0,0,2,0,0,2,0,0,3,0,0,3,0,0,5,0,4,4,1,2,4,14],[0,0,0,0,0],[-1,-1,11,-1,1],[7,0,8,0,9]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[{"name":"HelloWorld","rect":[0,0,195,270],"offset":[0,0],"originalSize":[195,270],"capInsets":[0,0,0,0]}],[2],0,[0],[5],[52]],[[[7,"SpotlightCase",null],[29,"Canvas","a286bbGknJLZpRpxROV6M94",[-6,-7],[[8,-1,[5,1280,720]],[4,45,-2],[130,-4,-3],[10,-5]],[4,4294769916],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[30,"bg",1,[[0,0,-8,[0],1],[9,45,200,150,-9]],[5,1280,720]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[25,"Main Camera",1,[[35,-3,7,-1,false,false,-10]],[0,0,623.5382907247958,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,20,2,0,0,1,0,0,1,0,-1,4,0,-2,2,0,0,2,0,0,2,0,0,4,0,4,3,1,2,3,10],[0,0],[-1,1],[53,5]],[[[12,"Wave",{"0":{"defines":{"USE_TEXTURE":true,"ENABLE_WAVE":true}}}]],0,0,[0],[3],[54]],[[[19,"GaussianBlur",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"ENABLE_GAUSSIANBLUR":true}},"props",11,[{},"blurDensity",8,[0,100,100]]]]]],0,0,[0],[3],[55]],[[[5,"RollUv",[{"hash":2981254898,"record":null,"name":"RollUv|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  float timer;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float offset = fract(timer + v_uv0.y);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, vec2(v_uv0.x, offset));\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, vec2(v_uv0.x, offset) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float timer;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float offset = fract(timer + v_uv0.y);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, vec2(v_uv0.x, offset));\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, vec2(v_uv0.x, offset) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Params","binding":1,"members":[{"name":"timer","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"RollUv|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"timer":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[{"name":"dk","rect":[0,0,72,85],"offset":[0,0],"originalSize":[72,85],"capInsets":[16,16,15,22]}],[2],0,[0],[5],[56]],[[{"name":"default-h","rect":[0,0,320,443],"offset":[0,0],"originalSize":[320,443],"capInsets":[0,0,0,0]}],[2],0,[0],[5],[57]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,0",-1],[1],0,[],[],[]],[[[19,"streak",[{},"0",11,[{},"props",11,[{},"mainTexture",6,0]]]]],0,0,[0,0],[8,3],[58,59]],[[[5,"Mosaic",[{"hash":1914500425,"record":null,"name":"Mosaic|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MOSAIC\nuniform Mosaic {\n  float xBlockCount;\n  float yBlockCount;\n};\nvec2 getUvMapPos() {\n  float xCount;\n  if (xBlockCount <= 0.0) {\n    xCount = 1.0;\n  } else {\n    xCount = xBlockCount;\n  }\n  float blockWidth = 1.0 / xCount;\n  float blockXIndex = floor(v_uv0.x / blockWidth);\n  float yCount;\n  if (yBlockCount <= 0.0) {\n    yCount = 1.0;\n  } else {\n    yCount = yBlockCount;\n  }\n  float blockHeight = 1.0 / yCount;\n  float blockYIndex = floor(v_uv0.y / blockHeight);\n  return vec2(blockWidth * (blockXIndex + 0.5), blockHeight * (blockYIndex + 0.5));\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 mosPos = v_uv0;\n  #if USE_MOSAIC\n    mosPos = getUvMapPos();\n  #endif\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, mosPos);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, mosPos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MOSAIC\nuniform float xBlockCount;\nuniform float yBlockCount;\nvec2 getUvMapPos() {\n  float xCount;\n  if (xBlockCount <= 0.0) {\n    xCount = 1.0;\n  } else {\n    xCount = xBlockCount;\n  }\n  float blockWidth = 1.0 / xCount;\n  float blockXIndex = floor(v_uv0.x / blockWidth);\n  float yCount;\n  if (yBlockCount <= 0.0) {\n    yCount = 1.0;\n  } else {\n    yCount = yBlockCount;\n  }\n  float blockHeight = 1.0 / yCount;\n  float blockYIndex = floor(v_uv0.y / blockHeight);\n  return vec2(blockWidth * (blockXIndex + 0.5), blockHeight * (blockYIndex + 0.5));\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 mosPos = v_uv0;\n  #if USE_MOSAIC\n    mosPos = getUvMapPos();\n  #endif\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, mosPos);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, mosPos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_MOSAIC","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Mosaic","binding":1,"members":[{"name":"xBlockCount","type":13,"count":1},{"name":"yBlockCount","type":13,"count":1}],"defines":["USE_MOSAIC"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Mosaic|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"xBlockCount":{"type":13,"value":[30],"editor":{"tooltip":"X轴方向马赛克方块数量"}},"yBlockCount":{"type":13,"value":[30],"editor":{"tooltip":"Y轴方向马赛克方块数量"}}}}]}]]],0,0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,0",-1],[1],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[5,"SinLine",[{"hash":1115780019,"record":null,"name":"SinLine|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  vec2 resolution;\n};\nfloat time = cc_time.x;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 uv = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;\n  vec3 finalColor = vec3 ( 1.0, 0.1, 0.5 );\n  finalColor *= abs( 1.0 / (sin( uv.x + sin(uv.y+time)* 0.10 ) * 40.0) );\n  gl_FragColor = vec4( finalColor, 1.0 );\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 resolution;\nfloat time = cc_time.x;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 uv = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;\n  vec3 finalColor = vec3 ( 1.0, 0.1, 0.5 );\n  finalColor *= abs( 1.0 / (sin( uv.x + sin(uv.y+time)* 0.10 ) * 40.0) );\n  gl_FragColor = vec4( finalColor, 1.0 );\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Params","binding":1,"members":[{"name":"resolution","type":14,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"SinLine|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"resolution":{"type":14,"value":[1280,720]}}}]}]]],0,0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[19,"Wavelight",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"INPUT_IS_GAMMA":false,"ENABLE_WAVELIGHT":true}},"props",11,[{},"lightColor",8,[4,4294967295]]]]]],0,0,[0],[3],[60]],[[[5,"RoundEdge",[{"hash":3375261351,"record":null,"name":"RoundEdge|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_ROUNDEDGE\nuniform RoundEdge {\n  float radius;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_ROUNDEDGE\n  float radius_c = clamp(radius, 0.0, 0.5);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float rx = abs(uv.x) - (0.5 - radius_c);\n  float ry = abs(uv.y) - (0.5 - radius_c);\n  float mx = step((0.5 - radius_c), abs(uv.x));\n  float my = step((0.5 - radius_c), abs(uv.y));\n  float len = length(vec2(abs(rx), abs(ry)));\n  float a = 1.0 - mx * my * step(radius_c, len) * smoothstep(0., radius_c * 0.05, len - radius_c);\n  o = vec4(o.rgb, o.a * a);\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_ROUNDEDGE\nuniform float radius;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_ROUNDEDGE\n  float radius_c = clamp(radius, 0.0, 0.5);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float rx = abs(uv.x) - (0.5 - radius_c);\n  float ry = abs(uv.y) - (0.5 - radius_c);\n  float mx = step((0.5 - radius_c), abs(uv.x));\n  float my = step((0.5 - radius_c), abs(uv.y));\n  float len = length(vec2(abs(rx), abs(ry)));\n  float a = 1.0 - mx * my * step(radius_c, len) * smoothstep(0., radius_c * 0.05, len - radius_c);\n  o = vec4(o.rgb, o.a * a);\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_ROUNDEDGE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"RoundEdge","binding":1,"members":[{"name":"radius","type":13,"count":1}],"defines":["ENABLE_ROUNDEDGE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"RoundEdge|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"radius":{"type":13,"value":[0.2],"editor":{"tooltip":"圆角半径"}}}}]}]]],0,0,[],[],[]],[[[7,"EffectCase",null],[46,"layout",[-3,-4,-5,-6,-7,-8,-9,-10],[[104,1,3,50,-1,[5,1280,720]],[50,42,720,-2]],[5,1280,720]],[17,"Canvas","a5esZu+45LA5mBpvttspPD",[-15,-16,1],[[8,-11,[5,1280,720]],[4,45,-12],[131,-13],[10,-14]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[27,"sinLine",2,[[-17,[37,-19,-18],[9,45,1280,720,-20]],1,4,4],[5,1280,720]],[13,"streamer",1,[-21,-22],[5,195,360],[-492.5,180,0,0,0,0,1,1,1,1]],[13,"oldPhoto",1,[-23,-24],[5,195,360],[-297.5,180,0,0,0,0,1,1,1,1]],[13,"gray",1,[-25,-26],[5,195,360],[-102.5,180,0,0,0,0,1,1,1,1]],[13,"mosaic",1,[-27,-28],[5,195,360],[92.5,180,0,0,0,0,1,1,1,1]],[13,"gaussianBlur",1,[-29,-30],[5,195,360],[287.5,180,0,0,0,0,1,1,1,1]],[13,"rollUv",1,[-31,-32],[5,195,360],[482.5,180,0,0,0,0,1,1,1,1]],[13,"circular",1,[-33,-34],[5,195,360],[-492.5,-180,0,0,0,0,1,1,1,1]],[13,"roundEdge",1,[-35,-36],[5,195,360],[-297.5,-180,0,0,0,0,1,1,1,1]],[11,"New Node",[2],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[2,"Main Camera",2,[[33,7,-1,-37,[4,4282067492]]],[5,960,640],[0,0,533.4716487312143,0,0,0,1,1,1,1]],[32,0,3,[0]],[2,"HelloWorld",4,[[21,-38,[1],2]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[14,"title",4,[[15,"流光",42,1,1,1,"宋体",-39,[3]]],[4,4290756543],[5,81.56,52.92],[0,-130,0,0,0,0,1,1,1,1]],[2,"HelloWorld",5,[[21,-40,[4],5]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[14,"title",5,[[15,"老照片",42,1,1,1,"宋体",-41,[6]]],[4,4290756543],[5,122.34,52.92],[0,-130,0,0,0,0,1,1,1,1]],[2,"HelloWorld",6,[[21,-42,[7],8]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[14,"title",6,[[15,"置灰",42,1,1,1,"宋体",-43,[9]]],[4,4290756543],[5,81.56,52.92],[0,-130,0,0,0,0,1,1,1,1]],[2,"HelloWorld",7,[[21,-44,[10],11]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[14,"title",7,[[15,"马赛克",42,1,1,1,"宋体",-45,[12]]],[4,4290756543],[5,122.34,52.92],[0,-130,0,0,0,0,1,1,1,1]],[2,"HelloWorld",8,[[21,-46,[13],14]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[14,"title",8,[[15,"高斯模糊",42,1,1,1,"宋体",-47,[15]]],[4,4290756543],[5,163.13,52.92],[0,-130,0,0,0,0,1,1,1,1]],[2,"HelloWorld",9,[[21,-48,[16],17]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[14,"title",9,[[15,"uv滚动",42,1,1,1,"宋体",-49,[18]]],[4,4290756543],[5,123.13,52.92],[0,-130,0,0,0,0,1,1,1,1]],[2,"HelloWorld",10,[[0,0,-50,[19],20]],[5,195,195],[0,45,0,0,0,0,1,1,1,1]],[14,"title",10,[[15,"圆形",42,1,1,1,"宋体",-51,[21]]],[4,4290756543],[5,81.56,52.92],[0,-130,0,0,0,0,1,1,1,1]],[2,"HelloWorld",11,[[0,0,-52,[22],23]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[14,"title",11,[[15,"圆角",42,1,1,1,"宋体",-53,[24]]],[4,4290756543],[5,81.56,52.92],[0,-130,0,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,13,0,-2,3,0,-1,14,0,7,14,0,0,3,0,0,3,0,-1,15,0,-2,16,0,-1,17,0,-2,18,0,-1,19,0,-2,20,0,-1,21,0,-2,22,0,-1,23,0,-2,24,0,-1,25,0,-2,26,0,-1,27,0,-2,28,0,-1,29,0,-2,30,0,0,13,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,0,29,0,0,30,0,4,12,1,2,2,2,2,12,53],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14],[-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,1],[61,12,2,12,3,2,3,3,2,3,13,2,13,14,2,14,15,2,15,16,62,16,17,63,17,1]]]]