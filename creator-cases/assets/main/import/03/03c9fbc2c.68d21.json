[1,["ecpdLyjvZBwrvm+cedCcQy","c5pm2ljHNKNJMPIWkBLKKm","3dHN3m4xhNdYkqiKaVzSUD","32BDteSIhMHr0bnqNpvZbb","6fgBCSDDdPMInvyNlggls2","73gu8lX5VKIYNcVsCidYjk","9bvaMerUlDyary99mJa6xp","246xR6KFVBt5RWOLRNyews","1cIcudy0REzr7dxm5osXil","7dl646J1ZONqlPN17Hbxw0","cewDngENdPeLzZ9f/O/9Xh","1bZ76y+dhKF7E4lo6DxhDl","6a6CwCRoVObrHs9hGmBUKj","abMqjLgjBPh7JpqF/AtzKY","d1zUbfa0ZFzY7yxuZ4G+me","15Brc2c6pOw5k+4rnyIWlF","0dvkK2fdNI5ZJP77PCFoMR","01SqhKgu5M/rvts7omDL6K","f2uVibFb5IXr7YP9OFV54/","95bLksmiFDUqMc8mBqu0SO","2ef7+vAZdGFYM89l52/4EH","d4QGv+71pB4YtYXpg7qWTy","625Jy/0zNJhqmphtWCXaek","e1eGU+ZitDhLTHaBGh141Y","f6+9yqF2ZKTbdtRcWS8bty","d8HsitJHxOYqo801xBk8ev","c94qAUdLZL86mFFn2gbijS","97yzEyZeJJ3Z+6gdOaWJOc","43L6CczwNM/6GGmCYEQIoH","dbVIdmGwBNkqjw8svlWO1g","f8DlO7io1KNp/lDAWBEx6M","daopNGeZ9OibWO21NY2wAo","a8cQQw4RhKk7JABA8nSgZU","8dDmKanpZF7rwGFwz89vvD","b5VLI/D89M1asqlTCO5/iv","c4NkiuA/xOepF4JgHehgpb","e5J9ndiq5Gg6CeRsKWpsmE","33PwZpxuxC0Jp9dcw4IkAv","2afAA24LNP4YmYiaVLiivs","2ahVLjKsNO0Zv/QwwKuKLm","2fqBKpW55AqqLxOlHQ0Lm2","d6YcUy6yBHT563f6A42yll"],["node","_spriteFrame","_parent","_effectAsset","_textureSetter","scene","control","_N$content","textureRender","mainList","_defaultClip","bg","mainTexture"],[["cc.Node",["_name","_is3DNode","_groupIndex","_id","_opacity","_components","_contentSize","_parent","_trs","_children","_anchorPoint","_position","_scale","_color","_eulerAngles"],-2,9,5,1,7,2,5,8,8,5,5],"cc.Texture2D",["cc.Widget",["_alignFlags","_originalHeight","_originalWidth","_top","_right","_bottom","_left","node"],-4,1],"cc.SpriteFrame",["cc.Camera",["_clearFlags","_depth","_cullingMask","_ortho","_alignWithScreen","_farClip","_nearClip","node","_backgroundColor"],-4,1,5],["cc.Label",["_string","_N$horizontalAlign","_N$verticalAlign","_N$fontFamily","_lineHeight","_N$overflow","_N$cacheMode","_fontSize","_styleFlags","node","_materials"],-6,1,3],["cc.Sprite",["_sizeMode","_type","node","_materials","_spriteFrame"],1,1,3,6],["cc.Layout",["_resize","_N$layoutType","_N$paddingLeft","_N$paddingRight","_N$spacingX","node","_layoutSize"],-2,1,5],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.ScrollView",["brake","bounceDuration","_N$horizontalScrollBar","_N$verticalScrollBar","vertical","horizontal","node","_N$content"],-3,1,1],["cc.Scene",["_name","_children","_anchorPoint","_trs","_scale"],2,2,5,7,8],["cc.CurveRange",["constant"],2],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1],["cc.Material",["_name","_techniqueData"],2,11],["cc.AnimationClip",["_name","_duration","wrapMode","curveData"],0,11],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Node",["_name","_parent","_children","_components","_contentSize","_anchorPoint","_trs"],2,1,2,12,5,5,7],["cc.Canvas",["node","_designResolution"],3,1,5],["38e3cYHoCFNDKDVql/o5qOO",["node","control","textureRender"],3,1,1,6],["75d48lC5HlGLqTP86sGPtGS",["node","mainList"],3,1,1],["f93e55TfQxLOoILMSqltWzD",["adaptiveSize","node"],2,1],["cc.Button",["zoomScale","_N$transition","node","clickEvents"],1,1,9],["4daeeS6TERKraSFhqrThdUB",["lackCenter","frameByFrameRenderNum","node","tmpNode","pageChangeEvent","renderEvent"],1,1,1,4,4],["cc.Graphics",["_lineWidth","node","_materials"],2,1,3],["cc.Mask",["_N$alphaThreshold","node","_materials"],2,1,3],["f15c4Pk3g9JaK0IIsX+vhFW",["node"],3,1],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.ParticleSystem3D",["duration","node","_materials","startDelay","startLifetime","startColor","startSize","startSpeed","startRotation","gravityModifier","rateOverTime","rateOverDistance","bursts","_trailModule"],2,1,3,4,4,4,4,4,4,4,4,4,9,4],["cc.GradientRange",[],3],["cc.Burst",["minCount","maxCount","count"],1,4],["cc.TrailModule",["_enable","_minParticleDistance","existWithParticles","lifeTime","widthRatio","colorOverTrail","colorOvertime"],0,4,4,4,4],["10c0bmcfFFEoL8tBkIF4+Vf",["node","bg"],3,1,1],["4a6c76IbcdPM44OzM2/sPU/",["node"],3,1]],[[0,0,7,5,6,8,2],[12,0,1,2,4],[0,0,7,9,6,8,2],[0,0,7,5,13,6,8,2],[2,0,2,1,7,4],[5,0,4,8,1,2,3,9,10,7],[16,0,1,3],[18,0,1,1],[13,0,1,3],[2,0,7,2],[6,2,3,4,1],[10,0,1,2,3,2],[26,0,1],[11,1],[14,0,1,2],[6,0,2,3,4,2],[11,0,2],[6,1,0,2,3,4,3],[0,0,3,9,5,6,8,3],[0,0,3,9,5,13,6,8,3],[0,0,7,5,6,2],[0,0,7,5,8,2],[8,0,1,2,3],[4,2,0,1,3,4,7,6],[29,1],[0,0,9,5,6,8,2],[0,0,9,5,6,10,2],[0,0,7,5,6,11,12,2],[0,0,7,9,5,6,10,2],[2,0,1,7,3],[2,0,2,7,3],[2,0,3,7,3],[19,0,1,2,1],[21,0,1,2],[8,1],[23,0,1,2,3,4,5,3],[24,0,1,2,2],[25,0,1,2,2],[4,0,1,7,8,3],[15,0,1,2,3,4],[0,0,7,9,5,6,10,8,2],[0,0,1,2,7,9,4],[0,0,1,2,7,9,5,4],[0,0,1,2,7,5,8,14,4],[0,0,1,2,7,5,8,4],[0,0,3,9,5,6,11,12,8,3],[0,0,4,7,5,6,10,8,3],[0,0,7,5,11,12,8,2],[0,0,9,5,6,2],[17,0,1,2,3,4,5,6,2],[2,0,6,4,3,5,2,1,7,8],[2,0,3,2,1,7,5],[2,0,4,5,7,4],[20,0,1,1],[22,0,1,2,3,3],[9,4,0,1,2,3,6,7,6],[9,5,0,1,2,3,6,7,6],[7,0,1,2,3,4,5,6,6],[7,0,1,5,6,3],[7,0,1,2,5,6,4],[5,0,1,2,3,5,6,9,10,7],[5,0,7,4,1,2,3,5,6,9,10,9],[5,0,7,4,1,2,3,9,10,7],[10,0,1,2,4,3,2],[4,2,0,1,7,8,4],[4,2,5,3,4,7,5],[4,2,0,1,6,7,5],[27,0,1,2,3,2],[28,0,1,2,3,4,5,6,7,8,9,10,11,12,13,2],[30,0,1,2,3],[31,0,1,2,3,4,5,6,4],[32,0,1,1],[33,0,1]],[[["0,9729,9729,33071,33071,0,0,0",-1],[1],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[1,"Streamer",[{"hash":2971403177,"record":null,"name":"Streamer|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_STREAMER\nuniform Streamer {\n  vec4 lightColor;\n  vec2 light;\n  float lightAngle;\n  float lightWidth;\n  float enableFog;\n};\nvec4 addLightColor(vec4 color, vec4 lightColor, vec2 light, float lightAngle, float lightWidth) {\n  if (lightWidth <= 0.0) {\n    return color;\n  }\n  float radians = radians(lightAngle);\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n    float offsetX = light.x - ((1.0 - light.y) / tan(radians));\n    float dx = offsetX + (1.0 - v_uv0.y) / tan(radians);\n    float offsetDis = abs(v_uv0.x - dx);\n    dis = sin(radians) * offsetDis;\n  } else {\n    dis = abs(v_uv0.y - light.y);\n  }\n  float a = 1.0 ;\n  if (bool(1.0)) {\n    a *= step(0.3, color.a);\n  }\n  if (dis <= lightWidth * 0.5) {\n    a *= 1.0 - dis / (lightWidth * 0.5);\n  } else {\n    a = 0.0;\n  }\n  if (bool(enableFog)) color = vec4(color.rgb, a);\n  lightColor = lightColor * a;\n  return color * color.a + lightColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_STREAMER\n  gl_FragColor = addLightColor(gl_FragColor, lightColor, light, lightAngle, lightWidth);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_STREAMER\nuniform vec4 lightColor;\nuniform vec2 light;\nuniform float lightAngle;\nuniform float lightWidth;\nuniform float enableFog;\nvec4 addLightColor(vec4 color, vec4 lightColor, vec2 light, float lightAngle, float lightWidth) {\n  if (lightWidth <= 0.0) {\n    return color;\n  }\n  float radians = radians(lightAngle);\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n    float offsetX = light.x - ((1.0 - light.y) / tan(radians));\n    float dx = offsetX + (1.0 - v_uv0.y) / tan(radians);\n    float offsetDis = abs(v_uv0.x - dx);\n    dis = sin(radians) * offsetDis;\n  } else {\n    dis = abs(v_uv0.y - light.y);\n  }\n  float a = 1.0 ;\n  if (bool(1.0)) {\n    a *= step(0.3, color.a);\n  }\n  if (dis <= lightWidth * 0.5) {\n    a *= 1.0 - dis / (lightWidth * 0.5);\n  } else {\n    a = 0.0;\n  }\n  if (bool(enableFog)) color = vec4(color.rgb, a);\n  lightColor = lightColor * a;\n  return color * color.a + lightColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_STREAMER\n  gl_FragColor = addLightColor(gl_FragColor, lightColor, light, lightAngle, lightWidth);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_STREAMER","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Streamer","binding":1,"members":[{"name":"lightColor","type":16,"count":1},{"name":"light","type":14,"count":1},{"name":"lightAngle","type":13,"count":1},{"name":"lightWidth","type":13,"count":1},{"name":"enableFog","type":13,"count":1}],"defines":["ENABLE_STREAMER"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Streamer|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"lightColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"流光颜色"}},"light":{"type":14,"value":[0.2,0.2],"editor":{"tooltip":"流光中心"}},"lightAngle":{"type":13,"value":[0],"editor":{"tooltip":"流光角度","range":[0,180]}},"lightWidth":{"type":13,"value":[0.2],"editor":{"tooltip":"流光宽度"}},"enableFog":{"type":13,"value":[0],"editor":{"tooltip":"是否启用迷雾效果(0:不启用 非0:启用)"}}}}]}]]],0,0,[],[],[]],[[[8,"RollUv",{"0":{"defines":{"USE_TEXTURE":true},"props":{"timer":0}}}]],0,0,[0],[3],[14]],[[[14,"Streamer",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"ENABLE_STREAMER":true}},"props",11,[{"lightWidth":0.2,"enableFog":0,"lightAngle":60},"lightColor",8,[4,4289229823],"light",8,[0,0.5,0.5]]]]]],0,0,[0],[3],[15]],[[[39,"rotateY",1,2,[{},"props",11,[{},"eulerAngles",12,[[[{"frame":0},"value",8,[1,0,0,0]],[{"frame":1},"value",8,[1,0,360,0]]],11,11]]]]],0,0,[],[],[]],[[[1,"Wavelight",[{"hash":441056161,"record":null,"name":"Wavelight|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVELIGHT\nuniform Wavelight {\n  vec4 lightColor;\n};\nvec4 addLightColor(vec4 lightColor) {\n  float timers = cc_time.x * .5 + 5.;\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv * 6.12, 6.12) - 250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .0045;\n  for (int n = 0; n < 5; n++)\n  {\n      float t =  timers * (1.0 - (3.5 / float(n + 1)));\n      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));\n      c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  c /= float(5);\n  c = 1.17 - pow(c, 1.4);\n  vec4 tex = texture2D(texture, uv);\n  vec3 colour = vec3(pow(abs(c), 20.0));\n  colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n  float alpha = c * tex[3];\n  tex[0] = tex[0] + colour[0] * alpha;\n  tex[1] = tex[1] + colour[1] * alpha;\n  tex[2] = tex[2] + colour[2] * alpha;\n  return lightColor * tex;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVELIGHT\n    gl_FragColor = addLightColor(lightColor);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVELIGHT\nuniform vec4 lightColor;\nvec4 addLightColor(vec4 lightColor) {\n  float timers = cc_time.x * .5 + 5.;\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv * 6.12, 6.12) - 250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = .0045;\n  for (int n = 0; n < 5; n++)\n  {\n      float t =  timers * (1.0 - (3.5 / float(n + 1)));\n      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));\n      c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  c /= float(5);\n  c = 1.17 - pow(c, 1.4);\n  vec4 tex = texture2D(texture, uv);\n  vec3 colour = vec3(pow(abs(c), 20.0));\n  colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n  float alpha = c * tex[3];\n  tex[0] = tex[0] + colour[0] * alpha;\n  tex[1] = tex[1] + colour[1] * alpha;\n  tex[2] = tex[2] + colour[2] * alpha;\n  return lightColor * tex;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVELIGHT\n    gl_FragColor = addLightColor(lightColor);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_WAVELIGHT","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Wavelight","binding":1,"members":[{"name":"lightColor","type":16,"count":1}],"defines":["ENABLE_WAVELIGHT"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Wavelight|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"lightColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"波光颜色"}}}}]}]]],0,0,[],[],[]],[[{"name":"item","rect":[0,0,720,126],"offset":[0,0],"originalSize":[720,126],"capInsets":[259,26,273,42]}],[3],0,[0],[4],[16]],[[{"name":"default","rect":[0,0,320,320],"offset":[0,0],"originalSize":[320,320],"capInsets":[0,0,0,0]}],[3],0,[0],[4],[17]],[[{"name":"background","rect":[0,0,1920,1080],"offset":[0,0],"originalSize":[1920,1080],"capInsets":[0,0,0,0]}],[3],0,[0],[4],[18]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[8,"Gray",{"0":{"props":{"grayLev":0,"oldLev":0},"defines":{"USE_TEXTURE":true,"ENABLE_OLD":true,"ENABLE_GRAY":true}}}]],0,0,[0],[3],[19]],[[[6,"main",null],[18,"Canvas","a5esZu+45LA5mBpvttspPD",[-8,-9,-10],[[7,-1,[5,1280,720]],[9,45,-2],[32,-4,-3,9],[17,1,0,-5,[10],11],[53,-7,-6]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[25,"case",[-14,-15],[[17,1,0,-11,[6],7],[33,true,-12],[29,5,520,-13]],[5,300,520],[160,0,0,0,0,0,1,1,1,1]],[25,"item",[-19],[[17,1,0,-16,[3],4],[33,true,-17],[54,0.9,3,-18,[[22,"75d48lC5HlGLqTP86sGPtGS","onItemClick",1]]]],[5,300,70],[0,-35,0,0,0,0,1,1,1,0]],[49,"scrollView",1,[-24],[[[55,false,0.75,0.23,null,null,-21,-20],[50,45,50,50,100,100,240,250,-22],-23],4,4,1],[5,1180,520],[0,0,0.5],[-590,0,0,0,0,0,1,1,1,1]],[26,"content",[2],[[57,1,1,10,10,10,-25,[5,320,520]],[29,5,520,-26]],[5,320,520],[0,0,0.5]],[40,"scrollView",2,[-31],[[56,false,0.75,0.23,null,null,-28,-27],[51,45,70,240,250,-29],[35,true,3,-30,3,[34],[22,"75d48lC5HlGLqTP86sGPtGS","onItemListRender",1]]],[5,300,450],[0,0.5,1],[0,190,0,0,0,0,1,1,1,1]],[26,"content",[3],[[30,40,220,-32],[58,1,2,-33,[5,300,70]]],[5,300,70],[0,0.5,1]],[27,"Control",1,[[36,1,-34,[0]],[4,45,640,1136,-35]],[5,1280,720],[1,0,0,0],[1,1,1,1]],[28,"view",4,[5],[[37,0,-36,[8]],[4,45,240,250,-37]],[5,1180,520],[0,0,0.5]],[28,"view",6,[7],[[37,0,-38,[5]],[4,45,240,250,-39]],[5,300,450],[0,0.5,1]],[0,"title",2,[[60,"3d-cases",1,1,"宋体",2,1,-40,[1]],[31,17,10,-41]],[5,300,50.4],[0,224.8,0,0,0,0,1,1,1,1]],[0,"title",3,[[61,"敬请期待",30,32,1,1,"宋体",2,1,-42,[2]],[31,17,16.040000000000003,-43]],[5,300,40.32],[0,-1.2000000000000028,0,0,0,0,1,1,1,1]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[0,"Main Camera",1,[[38,7,-1,-44,[4,4294967295]]],[5,960,640],[0,0,476.33883535253403,0,0,0,1,1,1,1]],[35,true,3,4,2,[34],[22,"75d48lC5HlGLqTP86sGPtGS","onMainListRender",1]]],0,[0,0,1,0,0,1,0,6,8,0,0,1,0,0,1,0,9,15,0,0,1,0,-1,14,0,-2,8,0,-3,4,0,0,2,0,0,2,0,0,2,0,-1,11,0,-2,6,0,0,3,0,0,3,0,0,3,0,-1,12,0,7,5,0,0,4,0,0,4,0,-3,15,0,-1,9,0,0,5,0,0,5,0,7,7,0,0,6,0,0,6,0,0,6,0,-1,10,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,14,0,5,13,1,2,13,2,2,5,3,2,7,5,2,9,7,2,10,44],[0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,-1,-1,1,-1,-1,1,-1,8,-1,1],[4,0,0,0,20,0,0,21,0,5,0,6]],[[[1,"Circular",[{"hash":3337231603,"record":null,"name":"Circular|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float len = distance(v_uv0, vec2(0.5, 0.5));\n  if (len > 0.4) {\n    if (len < 0.5) {\n      o.a *= 1.0 - smoothstep(0., 0.1, len - 0.4);\n    } else {\n      o.a = 0.;\n    }\n  }\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float len = distance(v_uv0, vec2(0.5, 0.5));\n  if (len > 0.4) {\n    if (len < 0.5) {\n      o.a *= 1.0 - smoothstep(0., 0.1, len - 0.4);\n    } else {\n      o.a = 0.;\n    }\n  }\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Circular|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[8,"Circular",{"0":{"defines":{"USE_TEXTURE":true}}}]],0,0,[0],[3],[22]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[8,"Mosaic",{"0":{"props":{"xBlockCount":30,"yBlockCount":30},"defines":{"USE_TEXTURE":true,"USE_MOSAIC":true}}}]],0,0,[0],[3],[23]],[[[6,"WavelightCase",null],[19,"Canvas","a286bbGknJLZpRpxROV6M94",[-4,-5],[[7,-1,[5,1280,720]],[9,45,-2],[12,-3]],[4,4294769916],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[20,"bg",1,[[15,0,-6,[0],1],[4,45,200,150,-7]],[5,1280,720]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[21,"Main Camera",1,[[23,-3,7,-1,false,false,-8]],[0,0,623.5382907247958,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,0,2,0,0,2,0,0,4,0,5,3,1,2,3,8],[0,0],[-1,1],[24,3]],[[[1,"Wave",[{"hash":1742949722,"record":null,"name":"Wave|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVE\nuniform Water {\n  vec2 iResolution;\n};\nvec2 s(vec2 p)\n{\n    float d = cc_time.x * 0.4, x = 8. * (p.x + d), y = 8.*(p.y + d);\n    return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 rs = iResolution.xy;\n    vec2 uv = fragCoord;\n    vec2 q = uv + 2. / iResolution.x * (s(uv) - s(uv + rs));\n    fragColor = texture2D(texture, q);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVE\n    mainImage(gl_FragColor, v_uv0.xy);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_WAVE\nuniform vec2 iResolution;\nvec2 s(vec2 p)\n{\n    float d = cc_time.x * 0.4, x = 8. * (p.x + d), y = 8.*(p.y + d);\n    return vec2(cos(x-y)*cos(y),sin(x+y)*sin(y));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 rs = iResolution.xy;\n    vec2 uv = fragCoord;\n    vec2 q = uv + 2. / iResolution.x * (s(uv) - s(uv + rs));\n    fragColor = texture2D(texture, q);\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_WAVE\n    mainImage(gl_FragColor, v_uv0.xy);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_WAVE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Water","binding":1,"members":[{"name":"iResolution","type":14,"count":1}],"defines":["ENABLE_WAVE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Wave|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"iResolution":{"type":14,"value":[1280,720],"editor":{"tooltip":"图片分辨率"}}}}]}]]],0,0,[],[],[]],[[[1,"Gray",[{"hash":956674703,"record":null,"name":"Gray|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_OLD\nuniform OldLevel {\n  float oldLev;\n};\nvec4 getOldColor(vec4 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec4(r, g, b, color.a);\n}\n#endif\n#if ENABLE_GRAY\nuniform GrayLevel {\n  float grayLev;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_OLD\n    vec4 srcColor = o;\n    vec4 oldColor = getOldColor(srcColor);\n    o = mix(srcColor, oldColor, oldLev);\n  #endif\n  #if ENABLE_GRAY\n    vec4 srcColor2 = o;\n    float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n    vec4 grayColor = vec4(gray, gray, gray, o.a);\n    o = mix(srcColor2, grayColor, grayLev);\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_OLD\nuniform float oldLev;\nvec4 getOldColor(vec4 color) {\n  float r = 0.393 * color.r + 0.769 * color.g + 0.189 * color.b;\n  float g = 0.349 * color.r + 0.686 * color.g + 0.168 * color.b;\n  float b = 0.272 * color.r + 0.534 * color.g + 0.131 * color.b;\n  return vec4(r, g, b, color.a);\n}\n#endif\n#if ENABLE_GRAY\nuniform float grayLev;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_OLD\n    vec4 srcColor = o;\n    vec4 oldColor = getOldColor(srcColor);\n    o = mix(srcColor, oldColor, oldLev);\n  #endif\n  #if ENABLE_GRAY\n    vec4 srcColor2 = o;\n    float gray = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n    vec4 grayColor = vec4(gray, gray, gray, o.a);\n    o = mix(srcColor2, grayColor, grayLev);\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_OLD","type":"boolean","defines":[]},{"name":"ENABLE_GRAY","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"OldLevel","binding":1,"members":[{"name":"oldLev","type":13,"count":1}],"defines":["ENABLE_OLD"]},{"name":"GrayLevel","binding":2,"members":[{"name":"grayLev","type":13,"count":1}],"defines":["ENABLE_GRAY"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Gray|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"oldLev":{"type":13,"value":[1],"editor":{"tooltip":"老化程度","range":[-2,2]}},"grayLev":{"type":13,"value":[1],"editor":{"tooltip":"灰化程度","range":[-5,5]}}}}]}]]],0,0,[],[],[]],[[[1,"Spotlight",[{"hash":1939494585,"record":null,"name":"Spotlight|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_DIFFUSION\nuniform Diffusion {\n  vec4 spotColor;\n  vec2 spot;\n  float radius;\n  float enableFog;\n};\nvec4 addLightColor(vec4 color, vec2 spot, float radius, vec4 spotColor) {\n  float dis = distance(v_uv0, spot);\n  float a = 1.0;\n  if (bool(1.0)) {\n    a *= step(0.01, color.a);\n  }\n  if (dis <= radius) {\n    a *= 1.0 - (dis / radius);\n  } else {\n    a = 0.0;\n  }\n  spotColor = spotColor * a;\n  if (bool(enableFog)) color = vec4(color.rgb, a);\n  return color + spotColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_DIFFUSION\n    gl_FragColor = addLightColor(gl_FragColor, spot, radius, spotColor);\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_DIFFUSION\nuniform vec4 spotColor;\nuniform vec2 spot;\nuniform float radius;\nuniform float enableFog;\nvec4 addLightColor(vec4 color, vec2 spot, float radius, vec4 spotColor) {\n  float dis = distance(v_uv0, spot);\n  float a = 1.0;\n  if (bool(1.0)) {\n    a *= step(0.01, color.a);\n  }\n  if (dis <= radius) {\n    a *= 1.0 - (dis / radius);\n  } else {\n    a = 0.0;\n  }\n  spotColor = spotColor * a;\n  if (bool(enableFog)) color = vec4(color.rgb, a);\n  return color + spotColor;\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_DIFFUSION\n    gl_FragColor = addLightColor(gl_FragColor, spot, radius, spotColor);\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_DIFFUSION","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Diffusion","binding":1,"members":[{"name":"spotColor","type":16,"count":1},{"name":"spot","type":14,"count":1},{"name":"radius","type":13,"count":1},{"name":"enableFog","type":13,"count":1}],"defines":["ENABLE_DIFFUSION"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Spotlight|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"spotColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color","tooltip":"扩散颜色"}},"spot":{"type":14,"value":[0.5,0.5],"editor":{"tooltip":"扩散坐标"}},"radius":{"type":13,"value":[0.2],"editor":{"tooltip":"扩散半径"}},"enableFog":{"type":13,"value":[0],"editor":{"tooltip":"是否启用迷雾效果(0:不启用 非0:启用)"}}}}]}]]],0,0,[],[],[]],[[{"name":"default_panel","rect":[0,0,20,20],"offset":[0,0],"originalSize":[20,20],"capInsets":[6,6,6,6]}],[3],0,[0],[4],[25]],[[[6,"WaveCase",null],[19,"Canvas","a286bbGknJLZpRpxROV6M94",[-4,-5],[[7,-1,[5,1280,720]],[9,45,-2],[12,-3]],[4,4294769916],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[20,"bg",1,[[15,0,-6,[0],1],[4,45,200,150,-7]],[5,1280,720]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[21,"Main Camera",1,[[23,-3,7,-1,false,false,-8]],[0,0,623.5382907247958,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,0,2,0,0,2,0,0,4,0,5,3,1,2,3,8],[0,0],[-1,1],[26,3]],[[[14,"Spotlight",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"ENABLE_DIFFUSION":true,"USE_ALPHA_TEST":false}},"props",11,[{"radius":0.3,"enableFog":1},"spotColor",8,[4,65418]]]]]],0,0,[0],[3],[27]],[[[6,"ParticleCase",null],[18,"Canvas","a5esZu+45LA5mBpvttspPD",[-4,-5],[[7,-1,[5,1280,720]],[9,45,-2],[12,-3]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[41,"3DStage",true,1,1,[-6,-7]],[42,"rotateY",true,1,2,[-9],[[67,true,-8,[3],2]]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[0,"Main Camera",1,[[64,-3,7,-1,-10,[4,4282067492]]],[5,960,640],[0,0,485.8402515230701,0,0,0,1,1,1,1]],[43,"3D Camera",true,1,2,[[65,2,1024,false,false,-11]],[0,200,623.5382907247958,-0.17364817766693033,0,0,0.984807753012208,1,1,1],[1,-20,0,0]],[44,"streakParticle",true,1,3,[[68,1,-12,[0,1],[13],[16,1],[24],[16,1],[13],[13],[13],[13],[13],[[69,1,1,[16,1]]],[70,true,0.12,false,[16,1],[16,10],[24],[24]]]],[100,0,0,0,0,0,1,100,100,100]]],0,[0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,2,0,-1,6,0,-2,3,0,0,3,0,-1,7,0,0,5,0,0,6,0,0,7,0,5,4,1,2,4,12],[0,0,0,0],[-1,-2,10,-1],[28,29,7,7]],[[[8,"RoundEdge",{"0":{"props":{"radius":0.2},"defines":{"USE_TEXTURE":true,"INPUT_IS_GAMMA":false,"ENABLE_ROUNDEDGE":true}}}]],0,0,[0],[3],[30]],[[[1,"GaussianBlur",[{"hash":3167973982,"record":null,"name":"GaussianBlur|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_GAUSSIANBLUR\n        uniform GaussianBlur{\n    vec2 blurDensity;\n  };\n  float getWeight(float x, float y) {\n    return (1.0 / (2.0 * 3.141592653589793 * pow(1.5, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(1.5, 2.0)));\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_GAUSSIANBLUR\n    const float size = floor(1.5 * 6.0 + 1.0);\n    const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n        totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n        totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);\n    float onePxWidth = 1.0 / blurDensity.x;\n    float onePxHeight = 1.0 / blurDensity.y;\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        finalColor += texture(texture, v_uv0 + vec2(onePxWidth * x, onePxHeight * y)) * weight;\n      }\n    }\n    gl_FragColor = finalColor;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_GAUSSIANBLUR\n        uniform vec2 blurDensity;\n  float getWeight(float x, float y) {\n    return (1.0 / (2.0 * 3.141592653589793 * pow(1.5, 2.0))) * pow(1.0 / 2.718281828459045, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(1.5, 2.0)));\n  }\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n  #if ENABLE_GAUSSIANBLUR\n    const float size = floor(1.5 * 6.0 + 1.0);\n    const float halfSize = floor(size / 2.0);\n    float totalWeight = getWeight(0.0, 0.0);\n    for(float x = 1.0; x <= halfSize; x++) {\n        totalWeight += getWeight(x, 0.0) * 2.0;\n    }\n    for(float y = 1.0; y <= halfSize; y++) {\n        totalWeight += getWeight(0.0, y) * 2.0;\n    }\n    for(float x = 1.0; x <= halfSize; x++) {\n      for (float y = 1.0; y<= halfSize; y++) {\n        totalWeight += getWeight(x, y) * 4.0;\n      }\n    }\n    vec4 finalColor = vec4(0.0, 0.0, 0.0, 0.0);\n    float onePxWidth = 1.0 / blurDensity.x;\n    float onePxHeight = 1.0 / blurDensity.y;\n    for(float x = -halfSize; x<= halfSize; x++) {\n      for (float y = -halfSize; y<= halfSize; y++) {\n        float weight = getWeight(x, y) / totalWeight;\n        finalColor += texture2D(texture, v_uv0 + vec2(onePxWidth * x, onePxHeight * y)) * weight;\n      }\n    }\n    gl_FragColor = finalColor;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_GAUSSIANBLUR","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"GaussianBlur","binding":1,"members":[{"name":"blurDensity","type":14,"count":1}],"defines":["ENABLE_GAUSSIANBLUR"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"GaussianBlur|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"blurDensity":{"type":14,"value":[100,100],"editor":{"tooltip":"模糊精度, 越小越模糊"}}}}]}]]],0,0,[],[],[]],[[[6,"three.js-demo",null],[45,"Canvas","07aKRq3y1AZ78BLCANAPcW",[-7,-8,-9],[[7,-1,[5,1280,720]],[4,45,1280,720,-2],[32,-4,-3,2],[17,1,0,-5,[3],4],[12,-6]],[5,1280,720],[1,667,375,0],[1,1,1,1],[640,360,0,0,0,0,1,1,1,1]],[27,"Control",1,[[36,1,-10,[0]],[4,45,640,1136,-11]],[5,1280,720],[1,0,0,0],[1,1,1,1]],[46,"New Label",150,1,[[62,"长按加速",30,32,1,1,"宋体",-12,[1]],[52,36,5,40,-13]],[5,120,40.32],[0,1,0],[635,-320,0,0,0,0,1,1,1,1]],[63,"New Node",[1],[0,0,0],[1,1,1,1],[0,0,0,0,0,0,1,1,1,1]],[47,"Main Camera",1,[[66,-3,7,-1,10,-14]],[1,0,0,360.8923137078945],[1,1,1,1],[0,0,476.3139720814413,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,6,2,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,2,0,-3,3,0,0,2,0,0,2,0,0,3,0,0,3,0,0,5,0,5,4,1,2,4,14],[0,0,0,0,0],[-1,-1,8,-1,1],[4,0,5,0,6]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[{"name":"HelloWorld","rect":[0,0,195,270],"offset":[0,0],"originalSize":[195,270],"capInsets":[0,0,0,0]}],[3],0,[0],[4],[31]],[[[6,"SpotlightCase",null],[19,"Canvas","a286bbGknJLZpRpxROV6M94",[-6,-7],[[7,-1,[5,1280,720]],[9,45,-2],[71,-4,-3],[12,-5]],[4,4294769916],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[20,"bg",1,[[15,0,-8,[0],1],[4,45,200,150,-9]],[5,1280,720]],[11,"New Node",[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[21,"Main Camera",1,[[23,-3,7,-1,false,false,-10]],[0,0,623.5382907247958,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,11,2,0,0,1,0,0,1,0,-1,4,0,-2,2,0,0,2,0,0,2,0,0,4,0,5,3,1,2,3,10],[0,0],[-1,1],[32,3]],[[[8,"Wave",{"0":{"defines":{"USE_TEXTURE":true,"ENABLE_WAVE":true}}}]],0,0,[0],[3],[33]],[[[14,"GaussianBlur",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"ENABLE_GAUSSIANBLUR":true}},"props",11,[{},"blurDensity",8,[0,100,100]]]]]],0,0,[0],[3],[34]],[[[1,"RollUv",[{"hash":2981254898,"record":null,"name":"RollUv|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Params {\n  float timer;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float offset = fract(timer + v_uv0.y);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, vec2(v_uv0.x, offset));\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, vec2(v_uv0.x, offset) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform float timer;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float offset = fract(timer + v_uv0.y);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, vec2(v_uv0.x, offset));\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, vec2(v_uv0.x, offset) + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Params","binding":1,"members":[{"name":"timer","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"RollUv|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"timer":{"type":13,"value":[0]}}}]}]]],0,0,[],[],[]],[[{"name":"dk","rect":[0,0,72,85],"offset":[0,0],"originalSize":[72,85],"capInsets":[16,16,15,22]}],[3],0,[0],[4],[35]],[[{"name":"default-h","rect":[0,0,320,443],"offset":[0,0],"originalSize":[320,443],"capInsets":[0,0,0,0]}],[3],0,[0],[4],[36]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,0",-1],[1],0,[],[],[]],[[[14,"builtin-3d-trail",[{},"0",11,[{},"props",11,[{},"mainTexture",6,0]]]]],0,0,[0,0],[12,3],[37,38]],[[[1,"Mosaic",[{"hash":1914500425,"record":null,"name":"Mosaic|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MOSAIC\nuniform Mosaic {\n  float xBlockCount;\n  float yBlockCount;\n};\nvec2 getUvMapPos() {\n  float xCount;\n  if (xBlockCount <= 0.0) {\n    xCount = 1.0;\n  } else {\n    xCount = xBlockCount;\n  }\n  float blockWidth = 1.0 / xCount;\n  float blockXIndex = floor(v_uv0.x / blockWidth);\n  float yCount;\n  if (yBlockCount <= 0.0) {\n    yCount = 1.0;\n  } else {\n    yCount = yBlockCount;\n  }\n  float blockHeight = 1.0 / yCount;\n  float blockYIndex = floor(v_uv0.y / blockHeight);\n  return vec2(blockWidth * (blockXIndex + 0.5), blockHeight * (blockYIndex + 0.5));\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 mosPos = v_uv0;\n  #if USE_MOSAIC\n    mosPos = getUvMapPos();\n  #endif\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, mosPos);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, mosPos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_MOSAIC\nuniform float xBlockCount;\nuniform float yBlockCount;\nvec2 getUvMapPos() {\n  float xCount;\n  if (xBlockCount <= 0.0) {\n    xCount = 1.0;\n  } else {\n    xCount = xBlockCount;\n  }\n  float blockWidth = 1.0 / xCount;\n  float blockXIndex = floor(v_uv0.x / blockWidth);\n  float yCount;\n  if (yBlockCount <= 0.0) {\n    yCount = 1.0;\n  } else {\n    yCount = yBlockCount;\n  }\n  float blockHeight = 1.0 / yCount;\n  float blockYIndex = floor(v_uv0.y / blockHeight);\n  return vec2(blockWidth * (blockXIndex + 0.5), blockHeight * (blockYIndex + 0.5));\n}\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 mosPos = v_uv0;\n  #if USE_MOSAIC\n    mosPos = getUvMapPos();\n  #endif\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, mosPos);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, mosPos + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_MOSAIC","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Mosaic","binding":1,"members":[{"name":"xBlockCount","type":13,"count":1},{"name":"yBlockCount","type":13,"count":1}],"defines":["USE_MOSAIC"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"Mosaic|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"xBlockCount":{"type":13,"value":[30],"editor":{"tooltip":"X轴方向马赛克方块数量"}},"yBlockCount":{"type":13,"value":[30],"editor":{"tooltip":"Y轴方向马赛克方块数量"}}}}]}]]],0,0,[],[],[]],[["0,9729,9729,33071,33071,0,0,0",-1],[1],0,[],[],[]],[["0,9729,9729,33071,33071,0,0,1",-1],[1],0,[],[],[]],[[[14,"Wavelight",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"INPUT_IS_GAMMA":false,"ENABLE_WAVELIGHT":true}},"props",11,[{},"lightColor",8,[4,4294967295]]]]]],0,0,[0],[3],[39]],[[[1,"RoundEdge",[{"hash":3375261351,"record":null,"name":"RoundEdge|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_ROUNDEDGE\nuniform RoundEdge {\n  float radius;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_ROUNDEDGE\n  float radius_c = clamp(radius, 0.0, 0.5);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float rx = abs(uv.x) - (0.5 - radius_c);\n  float ry = abs(uv.y) - (0.5 - radius_c);\n  float mx = step((0.5 - radius_c), abs(uv.x));\n  float my = step((0.5 - radius_c), abs(uv.y));\n  float len = length(vec2(abs(rx), abs(ry)));\n  float a = 1.0 - mx * my * step(radius_c, len) * smoothstep(0., radius_c * 0.05, len - radius_c);\n  o = vec4(o.rgb, o.a * a);\n  #endif\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if ENABLE_ROUNDEDGE\nuniform float radius;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  #if ENABLE_ROUNDEDGE\n  float radius_c = clamp(radius, 0.0, 0.5);\n  vec2 uv = v_uv0.xy - vec2(0.5, 0.5);\n  float rx = abs(uv.x) - (0.5 - radius_c);\n  float ry = abs(uv.y) - (0.5 - radius_c);\n  float mx = step((0.5 - radius_c), abs(uv.x));\n  float my = step((0.5 - radius_c), abs(uv.y));\n  float len = length(vec2(abs(rx), abs(ry)));\n  float a = 1.0 - mx * my * step(radius_c, len) * smoothstep(0., radius_c * 0.05, len - radius_c);\n  o = vec4(o.rgb, o.a * a);\n  #endif\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ENABLE_ROUNDEDGE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"RoundEdge","binding":1,"members":[{"name":"radius","type":13,"count":1}],"defines":["ENABLE_ROUNDEDGE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"RoundEdge|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"radius":{"type":13,"value":[0.2],"editor":{"tooltip":"圆角半径"}}}}]}]]],0,0,[],[],[]],[[[6,"EffectCase",null],[48,"layout",[-3,-4,-5,-6,-7,-8,-9,-10],[[59,1,3,50,-1,[5,1280,720]],[30,42,720,-2]],[5,1280,720]],[18,"Canvas","a5esZu+45LA5mBpvttspPD",[-15,1],[[7,-11,[5,1280,720]],[9,45,-12],[72,-13],[12,-14]],[5,1280,720],[640,360,0,0,0,0,1,1,1,1]],[2,"streamer",1,[-16,-17],[5,195,360],[-492.5,180,0,0,0,0,1,1,1,1]],[2,"oldPhoto",1,[-18,-19],[5,195,360],[-297.5,180,0,0,0,0,1,1,1,1]],[2,"gray",1,[-20,-21],[5,195,360],[-102.5,180,0,0,0,0,1,1,1,1]],[2,"mosaic",1,[-22,-23],[5,195,360],[92.5,180,0,0,0,0,1,1,1,1]],[2,"gaussianBlur",1,[-24,-25],[5,195,360],[287.5,180,0,0,0,0,1,1,1,1]],[2,"rollUv",1,[-26,-27],[5,195,360],[482.5,180,0,0,0,0,1,1,1,1]],[2,"circular",1,[-28,-29],[5,195,360],[-492.5,-180,0,0,0,0,1,1,1,1]],[2,"roundEdge",1,[-30,-31],[5,195,360],[-297.5,-180,0,0,0,0,1,1,1,1]],[11,"New Node",[2],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[0,"Main Camera",2,[[38,7,-1,-32,[4,4282067492]]],[5,960,640],[0,0,485.8402515230701,0,0,0,1,1,1,1]],[0,"HelloWorld",3,[[10,-33,[0],1]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[3,"title",3,[[5,"流光",42,1,1,1,"宋体",-34,[2]]],[4,4290756543],[5,81.56,52.92],[0,-130,0,0,0,0,1,1,1,1]],[0,"HelloWorld",4,[[10,-35,[3],4]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[3,"title",4,[[5,"老照片",42,1,1,1,"宋体",-36,[5]]],[4,4290756543],[5,122.34,52.92],[0,-130,0,0,0,0,1,1,1,1]],[0,"HelloWorld",5,[[10,-37,[6],7]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[3,"title",5,[[5,"置灰",42,1,1,1,"宋体",-38,[8]]],[4,4290756543],[5,81.56,52.92],[0,-130,0,0,0,0,1,1,1,1]],[0,"HelloWorld",6,[[10,-39,[9],10]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[3,"title",6,[[5,"马赛克",42,1,1,1,"宋体",-40,[11]]],[4,4290756543],[5,122.34,52.92],[0,-130,0,0,0,0,1,1,1,1]],[0,"HelloWorld",7,[[10,-41,[12],13]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[3,"title",7,[[5,"高斯模糊",42,1,1,1,"宋体",-42,[14]]],[4,4290756543],[5,163.13,52.92],[0,-130,0,0,0,0,1,1,1,1]],[0,"HelloWorld",8,[[10,-43,[15],16]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[3,"title",8,[[5,"uv滚动",42,1,1,1,"宋体",-44,[17]]],[4,4290756543],[5,123.13,52.92],[0,-130,0,0,0,0,1,1,1,1]],[0,"HelloWorld",9,[[15,0,-45,[18],19]],[5,195,195],[0,45,0,0,0,0,1,1,1,1]],[3,"title",9,[[5,"圆形",42,1,1,1,"宋体",-46,[20]]],[4,4290756543],[5,81.56,52.92],[0,-130,0,0,0,0,1,1,1,1]],[0,"HelloWorld",10,[[15,0,-47,[21],22]],[5,195,270],[0,45,0,0,0,0,1,1,1,1]],[3,"title",10,[[5,"圆角",42,1,1,1,"宋体",-48,[23]]],[4,4290756543],[5,81.56,52.92],[0,-130,0,0,0,0,1,1,1,1]]],0,[0,0,1,0,0,1,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,12,0,-1,13,0,-2,14,0,-1,15,0,-2,16,0,-1,17,0,-2,18,0,-1,19,0,-2,20,0,-1,21,0,-2,22,0,-1,23,0,-2,24,0,-1,25,0,-2,26,0,-1,27,0,-2,28,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,26,0,0,27,0,0,28,0,5,11,1,2,2,2,2,11,48],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,1,-1],[8,1,8,2,1,2,2,1,2,9,1,9,10,1,10,11,1,11,12,40,12,13,41,13]]]]